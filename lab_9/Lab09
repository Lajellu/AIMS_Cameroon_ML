{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Lab 9 - 6.1 - One_Hot_Embeddings.ipynb","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"ZqJy4QmIa_vO"},"source":["import keras\n","keras.__version__"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yXs8vrcjfN9U"},"source":["First, copy the provided data sets into your Google Drive (they should be copied as-is: place the folder called 'content_for_Lab9' in the top directory of your drive - you do not need to extract the data at this time).\r\n","\r\n","\r\n","\r\n","---\r\n","\r\n","\r\n","\r\n","Then mount the drive as follows:\r\n","\r\n","(run the following cell - you will be prompted to login to your personal Google Drive and will need to copy and paste the unique code you are given into the input box)"]},{"cell_type":"code","metadata":{"id":"k6tbAicRd-k0"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BRXHGUYunIlu"},"source":["your file path should look like this:\r\n","\r\n","'/content/drive/MyDrive/content_for_Lab9/'\r\n","\r\n","and contain the following files:\r\n","\r\n","aclImdb_v1.tar.gz\r\n","\r\n","glove.6B.100d.txt\r\n"]},{"cell_type":"markdown","metadata":{"id":"TcC6JBPRdSst"},"source":["\n","# **One-hot encoding of words or characters**\n","\n","One-hot encoding is the most common, most basic way to turn a token into a vector. You already saw it in action in our initial IMDB and Reuters examples from chapter 3 (done with words, in our case). It consists in associating a unique integer index to every word, then turning this integer index i into a binary vector of size N, the size of the vocabulary, that would be all-zeros except for the i-th entry, which would be 1.\n","\n","We use one hot encoder to perform “binarization” of the category and include it as a feature to train the model. Consider the dataset with categorical data as [apple and berry]. After applying Label encoding, let’s say it would assign apple as ‘0’ and berry as ‘1’.\n","\n","Further, on applying one-hot encoding, it will create a binary vector of length 2. Here, the label ‘apple’ which is encoded as ‘0’ would be having a binary vector as [1,0]. This is because the value 1 would be placed at the encoded index which is zero for apple(as seen in the label encoding of it).\n","\n","So, [apple, berry, berry] would be encoded as: \n","\n","[1, 0]\n","\n","[0, 1]\n","\n","[0, 1]\n","\n","\n","Another example:\n","\n","![Untitled.png](https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fmiro.medium.com%2Fmax%2F1500%2F1*80tflY8LxDFRmkD16u25RQ.png&f=1&nofb=1)\n","\n","Another example: \n","\n","Suppose you have ‘flower’ feature which can take values ‘daffodil’, ‘lily’, and ‘rose’. One hot encoding converts ‘flower’ feature to three features, ‘is_daffodil’, ‘is_lily’, and ‘is_rose’ which all are binary.\n","\n","\n","Of course, one-hot encoding can be done at the character level as well. To unambiguously drive home what one-hot encoding is and how to implement it, here are two toy examples of one-hot encoding: one for words, the other for characters.\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"TbNExm8IeCbY"},"source":["## Word level one-hot encoding (toy example):"]},{"cell_type":"code","metadata":{"id":"1d5DgZ5kdaFg"},"source":["import numpy as np\n","\n","# This is our initial data; one entry per \"sample\"\n","# (in this toy example, a \"sample\" is just a sentence, but\n","# it could be an entire document).\n","samples = ['The cat sat on the mat.', 'The dog ate my homework.']\n","\n","# First, build an index of all tokens in the data.\n","token_index = {}\n","for sample in samples:\n","    # We simply tokenize the samples via the `split` method.\n","    # in real life, we would also strip punctuation and special characters\n","    # from the samples.\n","    for word in sample.split():\n","        if word not in token_index:\n","            # Assign a unique index to each unique word\n","            token_index[word] = len(token_index) + 1\n","            # Note that we don't attribute index 0 to anything.\n","\n","# Next, we vectorize our samples.\n","# We will only consider the first `max_length` words in each sample.\n","max_length = 10\n","\n","# This is where we store our results:\n","results = np.zeros((len(samples), max_length, max(token_index.values()) + 1))\n","for i, sample in enumerate(samples):\n","    for j, word in list(enumerate(sample.split()))[:max_length]:\n","        index = token_index.get(word)\n","        results[i, j, index] = 1.\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kZWQDcPEdbqz"},"source":["\n","## Character level one-hot encoding (toy example):"]},{"cell_type":"code","metadata":{"id":"OZJ2mClzdc4s"},"source":["import string\n","\n","samples = ['The cat sat on the mat.', 'The dog ate my homework.']\n","characters = string.printable  # All printable ASCII characters.\n","token_index = dict(zip(characters, range(1, len(characters) + 1)))\n","\n","max_length = 50\n","results = np.zeros((len(samples), max_length, max(token_index.values()) + 1))\n","for i, sample in enumerate(samples):\n","    for j, character in enumerate(sample[:max_length]):\n","        index = token_index.get(character)\n","        results[i, j, index] = 1.\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WPVnnTTYdheC"},"source":["# Using Keras \n","\n","Note that Keras has built-in utilities for doing one-hot encoding text at the word level or character level, starting from raw text data. This is what you should actually be using, as it will take care of a number of important features, such as stripping special characters from strings, or only taking into the top N most common words in your dataset (a common restriction to avoid dealing with very large input vector spaces).\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"V4zUtui_ek34"},"source":["## Using Keras for word-level one-hot encoding:"]},{"cell_type":"code","metadata":{"id":"b6bfBnQWdjB6"},"source":["from keras.preprocessing.text import Tokenizer\n","\n","samples = ['The cat sat on the mat.', 'The dog ate my homework.']\n","\n","# We create a tokenizer, configured to only take\n","# into account the top-1000 most common words\n","tokenizer = Tokenizer(num_words=1000)\n","# This builds the word index\n","tokenizer.fit_on_texts(samples)\n","\n","# This turns strings into lists of integer indices.\n","sequences = tokenizer.texts_to_sequences(samples)\n","\n","# You could also directly get the one-hot binary representations.\n","# Note that other vectorization modes than one-hot encoding are supported!\n","one_hot_results = tokenizer.texts_to_matrix(samples, mode='binary')\n","\n","# This is how you can recover the word index that was computed\n","word_index = tokenizer.word_index\n","print('Found %s unique tokens.' % len(word_index))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BW7am-5Fdk46"},"source":["\n","\n","---\n","# One-hot hashing trick\n","\n","A variant of one-hot encoding is the so-called \"one-hot hashing trick\", which can be used when the number of unique tokens in your vocabulary is too large to handle explicitly. Instead of explicitly assigning an index to each word and keeping a reference of these indices in a dictionary, one may hash words into vectors of fixed size. This is typically done with a very lightweight hashing function. The main advantage of this method is that it does away with maintaining an explicit word index, which saves memory and allows online encoding of the data (starting to generate token vectors right away, before having seen all of the available data). The one drawback of this method is that it is susceptible to \"hash collisions\": two different words may end up with the same hash, and subsequently any machine learning model looking at these hashes won't be able to tell the difference between these words. The likelihood of hash collisions decreases when the dimensionality of the hashing space is much larger than the total number of unique tokens being hashed.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"-Cphatnje2tK"},"source":["## Word-level one-hot encoding with hashing trick (toy example):"]},{"cell_type":"code","metadata":{"id":"a7xrqaUHdq0Q"},"source":["samples = ['The cat sat on the mat.', 'The dog ate my homework.']\n","\n","# We will store our words as vectors of size 1000.\n","# Note that if you have close to 1000 words (or more)\n","# you will start seeing many hash collisions, which\n","# will decrease the accuracy of this encoding method.\n","dimensionality = 1000\n","max_length = 10\n","\n","results = np.zeros((len(samples), max_length, dimensionality))\n","for i, sample in enumerate(samples):\n","    for j, word in list(enumerate(sample.split()))[:max_length]:\n","        # Hash the word into a \"random\" integer index\n","        # that is between 0 and 1000\n","        index = abs(hash(word)) % dimensionality\n","        results[i, j, index] = 1."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pXiKnIwIfiFc"},"source":["\n","\n","---\n","\n","\n","\n","---\n","\n","\n","# Word Embeddings\n","\n","Another popular and powerful way to associate a vector with a word is the use of dense \"word vectors\", also called \"word embeddings\". While the vectors obtained through one-hot encoding are binary, sparse (mostly made of zeros) and very high-dimensional (same dimensionality as the number of words in the vocabulary), \"word embeddings\" are low-dimensional floating point vectors (i.e. \"dense\" vectors, as opposed to sparse vectors). Unlike word vectors obtained via one-hot encoding, word embeddings are learned from data. It is common to see word embeddings that are 256-dimensional, 512-dimensional, or 1024-dimensional when dealing with very large vocabularies. On the other hand, one-hot encoding words generally leads to vectors that are 20,000-dimensional or higher (capturing a vocabulary of 20,000 token in this case). So, word embeddings pack more information into far fewer dimensions.\n"]},{"cell_type":"markdown","metadata":{"id":"fiUawCv8f-q1"},"source":["![word embeddings vs. one hot encoding](https://s3.amazonaws.com/book.keras.io/img/ch6/word_embeddings.png)"]},{"cell_type":"markdown","metadata":{"id":"kb8zSc1afhsN"},"source":["There are two ways to obtain word embeddings:\n","\n","*    Learn word embeddings jointly with the main task you care about (e.g. document classification or sentiment prediction). In this setup, you would start with random word vectors, then learn your word vectors in the same way that you learn the weights of a neural network.\n","*    Load into your model word embeddings that were pre-computed using a different machine learning task than the one you are trying to solve. These are called \"pre-trained word embeddings\".\n","\n","Let's take a look at both.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"J1i2h6AYcTkh"},"source":["## Learning word embeddings with the Embedding layer"]},{"cell_type":"markdown","metadata":{"id":"mIwaNqYZcT0H"},"source":["\n","\n","The simplest way to associate a dense vector to a word would be to pick the vector at random. The problem with this approach is that the resulting embedding space would have no structure: for instance, the words \"accurate\" and \"exact\" may end up with completely different embeddings, even though they are interchangeable in most sentences. It would be very difficult for a deep neural network to make sense of such a noisy, unstructured embedding space.\n","\n","To get a bit more abstract: the geometric relationships between word vectors should reflect the semantic relationships between these words. Word embeddings are meant to map human language into a geometric space. For instance, in a reasonable embedding space, we would expect synonyms to be embedded into similar word vectors, and in general we would expect the geometric distance (e.g. L2 distance) between any two word vectors to relate to the semantic distance of the associated words (words meaning very different things would be embedded to points far away from each other, while related words would be closer). Even beyond mere distance, we may want specific directions in the embedding space to be meaningful.\n","\n","In real-world word embedding spaces, common examples of meaningful geometric transformations are \"gender vectors\" and \"plural vector\". For instance, by adding a \"female vector\" to the vector \"king\", one obtain the vector \"queen\". By adding a \"plural vector\", one obtain \"kings\". Word embedding spaces typically feature thousands of such interpretable and potentially useful vectors.\n","\n","Is there some \"ideal\" word embedding space that would perfectly map human language and could be used for any natural language processing task? Possibly, but in any case, we have yet to compute anything of the sort. Also, there isn't such a thing as \"human language\", there are many different languages and they are not isomorphic, as a language is the reflection of a specific culture and a specific context. But more pragmatically, what makes a good word embedding space depends heavily on your task: the perfect word embedding space for an English-language movie review sentiment analysis model may look very different from the perfect embedding space for an English-language legal document classification model, because the importance of certain semantic relationships varies from task to task.\n","\n","It is thus reasonable to learn a new embedding space with every new task. Thankfully, backpropagation makes this really easy, and Keras makes it even easier. It's just about learning the weights of a layer: the Embedding layer.\n"]},{"cell_type":"code","metadata":{"id":"6oQf-zhMcglY"},"source":["from keras.layers import Embedding\n","\n","# The Embedding layer takes at least two arguments:\n","# the number of possible tokens, here 1000 (1 + maximum word index),\n","# and the dimensionality of the embeddings, here 64.\n","embedding_layer = Embedding(1000, 64)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZTMPsVD-cf8X"},"source":["The Embedding layer is best understood as a dictionary mapping integer indices (which stand for specific words) to dense vectors. It takes as input integers, it looks up these integers into an internal dictionary, and it returns the associated vectors. It's effectively a dictionary lookup.\n","\n","The Embedding layer takes as input a 2D tensor of integers, of shape (samples, sequence_length), where each entry is a sequence of integers. It can embed sequences of variable lengths, so for instance we could feed into our embedding layer above batches that could have shapes (32, 10) (batch of 32 sequences of length 10) or (64, 15) (batch of 64 sequences of length 15). All sequences in a batch must have the same length, though (since we need to pack them into a single tensor), so sequences that are shorter than others should be padded with zeros, and sequences that are longer should be truncated.\n","\n","This layer returns a 3D floating point tensor, of shape (samples, sequence_length, embedding_dimensionality). Such a 3D tensor can then be processed by a RNN layer or a 1D convolution layer (we will not cover these in this course).\n","\n","When you instantiate an Embedding layer, its weights (its internal dictionary of token vectors) are initially random, just like with any other layer. During training, these word vectors will be gradually adjusted via backpropagation, structuring the space into something that the downstream model can exploit. Once fully trained, your embedding space will show a lot of structure -- a kind of structure specialized for the specific problem you were training your model for.\n","\n","Let's apply this idea to the IMDB movie review sentiment prediction task that you are already familiar with. Let's quickly prepare the data. We will restrict the movie reviews to the top 10,000 most common words (like we did the first time we worked with this dataset), and cut the reviews after only 20 words. Our network will simply learn 8-dimensional embeddings for each of the 10,000 words, turn the input integer sequences (2D integer tensor) into embedded sequences (3D float tensor), flatten the tensor to 2D, and train a single Dense layer on top for classification.\n"]},{"cell_type":"code","metadata":{"id":"iaRfWc6-cmQN"},"source":["from keras.datasets import imdb\n","from keras import preprocessing\n","\n","# Number of words to consider as features\n","max_features = 10000\n","# Cut texts after this number of words \n","# (among top max_features most common words)\n","maxlen = 20\n","\n","# Load the data as lists of integers.\n","(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)\n","\n","# This turns our lists of integers\n","# into a 2D integer tensor of shape `(samples, maxlen)`\n","x_train = preprocessing.sequence.pad_sequences(x_train, maxlen=maxlen)\n","x_test = preprocessing.sequence.pad_sequences(x_test, maxlen=maxlen)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BnXL5dwWcoS5"},"source":["from keras.models import Sequential\n","from keras.layers import Flatten, Dense\n","\n","model = Sequential()\n","# We specify the maximum input length to our Embedding layer\n","# so we can later flatten the embedded inputs\n","model.add(Embedding(10000, 8, input_length=maxlen))\n","# After the Embedding layer, \n","# our activations have shape `(samples, maxlen, 8)`.\n","\n","# We flatten the 3D tensor of embeddings \n","# into a 2D tensor of shape `(samples, maxlen * 8)`\n","model.add(Flatten())\n","\n","# We add the classifier on top\n","model.add(Dense(1, activation='sigmoid'))\n","model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\n","model.summary()\n","\n","history = model.fit(x_train, y_train,\n","                    epochs=10,\n","                    batch_size=32,\n","                    validation_split=0.2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oBL_Rlv-cqcA"},"source":["We get to a validation accuracy of ~76%, which is pretty good considering that we only look at the first 20 words in every review. But note that merely flattening the embedded sequences and training a single Dense layer on top leads to a model that treats each word in the input sequence separately, without considering inter-word relationships and structure sentence (e.g. it would likely treat both \"this movie is a bomb\" and \"this movie is the bomb\" as being negative \"reviews\"). It would be much better to add recurrent layers or 1D convolutional layers on top of the embedded sequences to learn features that take into account each sequence as a whole. That's what we will focus on in the next few sections.\n"]},{"cell_type":"markdown","metadata":{"id":"4rin0XD9ctkF"},"source":["## Using pre-trained word embeddings"]},{"cell_type":"markdown","metadata":{"id":"p-QRk8cyct9Z"},"source":["\n","\n","Sometimes, you have so little training data available that could never use your data alone to learn an appropriate task-specific embedding of your vocabulary. What to do then?\n","\n","Instead of learning word embeddings jointly with the problem you want to solve, you could be loading embedding vectors from a pre-computed embedding space known to be highly structured and to exhibit useful properties -- that captures generic aspects of language structure. The rationale behind using pre-trained word embeddings in natural language processing is very much the same as for using pre-trained convnets in image classification: we don't have enough data available to learn truly powerful features on our own, but we expect the features that we need to be fairly generic, i.e. common visual features or semantic features. In this case it makes sense to reuse features learned on a different problem.\n","\n","Such word embeddings are generally computed using word occurrence statistics (observations about what words co-occur in sentences or documents), using a variety of techniques, some involving neural networks, others not. The idea of a dense, low-dimensional embedding space for words, computed in an unsupervised way, was initially explored by Bengio et al. in the early 2000s, but it only started really taking off in research and industry applications after the release of one of the most famous and successful word embedding scheme: the Word2Vec algorithm, developed by Mikolov at Google in 2013. Word2Vec dimensions capture specific semantic properties, e.g. gender.\n","\n","There are various pre-computed databases of word embeddings that can download and start using in a Keras Embedding layer. Word2Vec is one of them. Another popular one is called \"GloVe\", developed by Stanford researchers in 2014. It stands for \"Global Vectors for Word Representation\", and it is an embedding technique based on factorizing a matrix of word co-occurrence statistics. Its developers have made available pre-computed embeddings for millions of English tokens, obtained from Wikipedia data or from Common Crawl data.\n","\n","Let's take a look at how you can get started using GloVe embeddings in a Keras model. The same method will of course be valid for Word2Vec embeddings or any other word embedding database that you can download. We will also use this example to refresh the text tokenization techniques we introduced a few paragraphs ago: we will start from raw text, and work our way up.\n"]},{"cell_type":"markdown","metadata":{"id":"gLHiYaQFdTf5"},"source":["# Putting it all together: from raw text to word embeddings\n"]},{"cell_type":"markdown","metadata":{"id":"Nj88MppHdWr9"},"source":["We will be using a model similar to the one we just went over -- embedding sentences in sequences of vectors, flattening them and training a Dense layer on top. But we will do it using pre-trained word embeddings, and instead of using the pre-tokenized IMDB data packaged in Keras, we will start from scratch, by downloading the original text data.\n"]},{"cell_type":"markdown","metadata":{"id":"gTLrM6Zkde0p"},"source":["## Download the IMDB data as raw text"]},{"cell_type":"markdown","metadata":{"id":"6thCmcBwdjSg"},"source":["If you haven't already done so -> head to http://ai.stanford.edu/~amaas/data/sentiment/ and download the raw IMDB dataset (if the URL isn't working anymore, just Google \"IMDB dataset\"). \n","\n","Upload to colab and save into the content/ folder . (add compressed file using file icon to left)\n","\n","Uncompress it. (it is a .tar.gz compression - WinZip or other if on Windows -> follow the commands shown here)\n"]},{"cell_type":"code","metadata":{"id":"Y__AzvJgt-s-"},"source":["# !rm -rf /content/aclImdb"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N4cj5YMatT5M"},"source":["# !sudo tar -xvf /content/aclImdb_v1.tar.gz\n","!sudo tar -xvf /content/drive/MyDrive/content_for_Lab9/aclImdb_v1.tar.gz\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"c4U_5k_6YPXz"},"source":["\r\n","Now let's collect the individual training reviews into a list of strings, one string per review, and let's also collect the review labels (positive / negative) into a labels list:"]},{"cell_type":"code","metadata":{"id":"DndpppXTdlQG"},"source":["import os\n","\n","# imdb_dir = (\"/content/content_for_Lab9\")\n","# imdb_dir = (\"/content/drive/MyDrive/content_for_Lab9/aclImdb\")\n","imdb_dir = (\"/content/aclImdb\")\n","train_dir = os.path.join(imdb_dir, 'train')\n","\n","labels = []\n","texts = []\n","\n","for label_type in ['neg', 'pos']:\n","    dir_name = os.path.join(train_dir, label_type)\n","    for fname in os.listdir(dir_name):\n","        if fname[-4:] == '.txt':\n","            f = open(os.path.join(dir_name, fname))\n","            texts.append(f.read())\n","            f.close()\n","            if label_type == 'neg':\n","                labels.append(0)\n","            else:\n","                labels.append(1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5t8CB2q1dm7l"},"source":["## Tokenize the data"]},{"cell_type":"markdown","metadata":{"id":"5wq4GIaPdnDc"},"source":["Let's vectorize the texts we collected, and prepare a training and validation split. We will merely be using the concepts we introduced earlier in this section.\n","\n","Because pre-trained word embeddings are meant to be particularly useful on problems where little training data is available (otherwise, task-specific embeddings are likely to outperform them), we will add the following twist: we restrict the training data to its first 200 samples. So we will be learning to classify movie reviews after looking at just 200 examples...\n"]},{"cell_type":"code","metadata":{"id":"5JpfDsvvdtSE"},"source":["from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","import numpy as np\n","\n","maxlen = 100  # We will cut reviews after 100 words\n","training_samples = 200  # We will be training on 200 samples\n","validation_samples = 10000  # We will be validating on 10000 samples\n","max_words = 10000  # We will only consider the top 10,000 words in the dataset\n","\n","tokenizer = Tokenizer(num_words=max_words)\n","tokenizer.fit_on_texts(texts)\n","sequences = tokenizer.texts_to_sequences(texts)\n","\n","word_index = tokenizer.word_index\n","print('Found %s unique tokens.' % len(word_index))\n","\n","data = pad_sequences(sequences, maxlen=maxlen)\n","\n","labels = np.asarray(labels)\n","print('Shape of data tensor:', data.shape)\n","print('Shape of label tensor:', labels.shape)\n","\n","# Split the data into a training set and a validation set\n","# But first, shuffle the data, since we started from data\n","# where sample are ordered (all negative first, then all positive).\n","indices = np.arange(data.shape[0])\n","np.random.shuffle(indices)\n","data = data[indices]\n","labels = labels[indices]\n","\n","x_train = data[:training_samples]\n","y_train = labels[:training_samples]\n","x_val = data[training_samples: training_samples + validation_samples]\n","y_val = labels[training_samples: training_samples + validation_samples]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"te-2UAcIeIJY"},"source":["## Download the GloVe word embeddings\n","\n","If you haven't already done so -> head to https://nlp.stanford.edu/projects/glove/ (where you can learn more about the GloVe algorithm), and download the pre-computed embeddings from 2014 English Wikipedia. It's a 822MB zip file named glove.6B.zip, containing 100-dimensional embedding vectors for 400,000 words (or non-word tokens). As before, store the data in the content/ folder using the left-hand side menu.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"3iHQfco_YqW7"},"source":["Un-zip it: "]},{"cell_type":"code","metadata":{"id":"yfiwKSs3Aw5C"},"source":["# !unzip glove.6B.zip"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"O5LX__YTYzs1"},"source":["## Pre-process the embeddings\r\n","\r\n","Let's parse the un-zipped file (it's a txt file) to build an index mapping words (as strings) to their vector representation (as number vectors)."]},{"cell_type":"code","metadata":{"id":"XO9k4oBceP-C"},"source":["import os\n","\n","# glove_dir = '/content/'\n","glove_dir = '/content/drive/MyDrive/content_for_Lab9/'\n","\n","embeddings_index = {}\n","f = open(os.path.join(glove_dir, 'glove.6B.100d.txt'))\n","for line in f:\n","    values = line.split()\n","    word = values[0]\n","    coefs = np.asarray(values[1:], dtype='float32')\n","    embeddings_index[word] = coefs\n","f.close()\n","\n","print('Found %s word vectors.' % len(embeddings_index))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mJeaA30QeRq7"},"source":["Now let's build an embedding matrix that we will be able to load into an Embedding layer. It must be a matrix of shape (max_words, \n","embedding_dim), where each entry i contains the embedding_dim-dimensional vector for the word of index i in our reference word index (built during tokenization). Note that the index 0 is not supposed to stand for any word or token -- it's a placeholder.\n"]},{"cell_type":"code","metadata":{"id":"XIryRybGeSML"},"source":["embedding_dim = 100\n","\n","embedding_matrix = np.zeros((max_words, embedding_dim))\n","for word, i in word_index.items():\n","    embedding_vector = embeddings_index.get(word)\n","    if i < max_words:\n","        if embedding_vector is not None:\n","            # Words not found in embedding index will be all-zeros.\n","            embedding_matrix[i] = embedding_vector"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XQH8nsaJeTnN"},"source":["## Define a model\n","\n","We will be using the same model architecture as before:\n"]},{"cell_type":"code","metadata":{"id":"As0zZsGaeX6h"},"source":["from keras.models import Sequential\n","from keras.layers import Embedding, Flatten, Dense\n","\n","model = Sequential()\n","model.add(Embedding(max_words, embedding_dim, input_length=maxlen))\n","model.add(Flatten())\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1G3WogxgeZzc"},"source":["## Load the GloVe embeddings in the model\n","\n","The Embedding layer has a single weight matrix: a 2D float matrix where each entry i is the word vector meant to be associated with index i. Simple enough. Let's just load the GloVe matrix we prepared into our Embedding layer, the first layer in our model:\n"]},{"cell_type":"code","metadata":{"id":"p2aBJXolechH"},"source":["model.layers[0].set_weights([embedding_matrix])\n","model.layers[0].trainable = False"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BLhJ82JJeeeG"},"source":["Additionally, we freeze the embedding layer (we set its trainable attribute to False), following the same rationale as what you are already familiar with in the context of pre-trained convnet features: when parts of a model are pre-trained (like our Embedding layer), and parts are randomly initialized (like our classifier), the pre-trained parts should not be updated during training to avoid forgetting what they already know. The large gradient update triggered by the randomly initialized layers would be very disruptive to the already learned features."]},{"cell_type":"markdown","metadata":{"id":"b1dlv4jZehXr"},"source":["## Train and evaluate\n","\n","Let's compile our model and train it:"]},{"cell_type":"code","metadata":{"id":"yNWHSlQkeo1y"},"source":["model.compile(optimizer='rmsprop',\n","              loss='binary_crossentropy',\n","              metrics=['acc'])\n","history = model.fit(x_train, y_train,\n","                    epochs=10,\n","                    batch_size=32,\n","                    validation_data=(x_val, y_val))\n","model.save_weights('pre_trained_glove_model.h5')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MEyKgLTueqod"},"source":["Let's plot its performance over time:\n"]},{"cell_type":"code","metadata":{"id":"X1dYo8ulerQQ"},"source":["import matplotlib.pyplot as plt\n","\n","acc = history.history['acc']\n","val_acc = history.history['val_acc']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(1, len(acc) + 1)\n","\n","plt.plot(epochs, acc, 'bo', label='Training acc')\n","plt.plot(epochs, val_acc, 'b', label='Validation acc')\n","plt.title('Training and validation accuracy')\n","plt.legend()\n","\n","plt.figure()\n","\n","plt.plot(epochs, loss, 'bo', label='Training loss')\n","plt.plot(epochs, val_loss, 'b', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.legend()\n","\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oIfDx4qbeunj"},"source":["The model quickly starts overfitting, unsurprisingly given the small number of training samples. Validation accuracy has high variance for the same reason, but seems to reach high 50s.\n","\n","Note that your mileage may vary: since we have so few training samples, performance is heavily dependent on which exact 200 samples we picked, and we picked them at random. If it worked really poorly for you, try picking a different random set of 200 samples, just for the sake of the exercise (in real life you don't get to pick your training data).\n","\n","We can also try to train the same model without loading the pre-trained word embeddings and without freezing the embedding layer. In that case, we would be learning a task-specific embedding of our input tokens, which is generally more powerful than pre-trained word embeddings when lots of data is available. However, in our case, we have only 200 training samples. Let's try it:\n"]},{"cell_type":"code","metadata":{"id":"GwxgOxU6ewZ9"},"source":["from keras.models import Sequential\n","from keras.layers import Embedding, Flatten, Dense\n","\n","model = Sequential()\n","model.add(Embedding(max_words, embedding_dim, input_length=maxlen))\n","model.add(Flatten())\n","model.add(Dense(32, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","model.summary()\n","\n","model.compile(optimizer='rmsprop',\n","              loss='binary_crossentropy',\n","              metrics=['acc'])\n","history = model.fit(x_train, y_train,\n","                    epochs=10,\n","                    batch_size=32,\n","                    validation_data=(x_val, y_val))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"REA2PplceyKC"},"source":["acc = history.history['acc']\n","val_acc = history.history['val_acc']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(1, len(acc) + 1)\n","\n","plt.plot(epochs, acc, 'bo', label='Training acc')\n","plt.plot(epochs, val_acc, 'b', label='Validation acc')\n","plt.title('Training and validation accuracy')\n","plt.legend()\n","\n","plt.figure()\n","\n","plt.plot(epochs, loss, 'bo', label='Training loss')\n","plt.plot(epochs, val_loss, 'b', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.legend()\n","\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dYg6ItJ1ez4d"},"source":["\n","\n","\n","\n","\n","---\n","\n","\n","\n","---\n","\n","\n","---\n","\n","\n","\n","Validation accuracy stalls in the low 50s. So in our case, pre-trained word embeddings does outperform jointly learned embeddings. \n","\n","Finally, let's evaluate the model on the test data. First, we will need to tokenize the test data:\n"]},{"cell_type":"code","metadata":{"id":"uMurK17Se1Qt"},"source":["test_dir = os.path.join(imdb_dir, 'test')\n","\n","labels = []\n","texts = []\n","\n","for label_type in ['neg', 'pos']:\n","    dir_name = os.path.join(test_dir, label_type)\n","    for fname in sorted(os.listdir(dir_name)):\n","        if fname[-4:] == '.txt':\n","            f = open(os.path.join(dir_name, fname))\n","            texts.append(f.read())\n","            f.close()\n","            if label_type == 'neg':\n","                labels.append(0)\n","            else:\n","                labels.append(1)\n","\n","sequences = tokenizer.texts_to_sequences(texts)\n","x_test = pad_sequences(sequences, maxlen=maxlen)\n","y_test = np.asarray(labels)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"C94--Jyhe2r-"},"source":["And let's load and evaluate the first model:\n"]},{"cell_type":"code","metadata":{"id":"SbL2FEyje4M1"},"source":["model.load_weights('pre_trained_glove_model.h5')\n","model.evaluate(x_test, y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xBJyclvGe6Vy"},"source":["We get an appalling test accuracy of 54%. Working with just a handful of training samples is hard!\n"]},{"cell_type":"markdown","metadata":{"id":"OEqGIe0QdsVH"},"source":["\n","---\n","\n","# Conclusions"]},{"cell_type":"markdown","metadata":{"id":"Z5unp9BQfKTS"},"source":["Now you’re able to do the following:\n","\n","1. Turn raw text into something a neural network can process\n","\n","2. Use the Embedding layer in a Keras model to learn task-specific token embeddings\n","\n","3. Use pretrained word embeddings to get an extra boost on small natural-\n","language-processing problems"]},{"cell_type":"markdown","metadata":{"id":"aakho28FfKq3"},"source":["\n","\n","---\n","\n","\n","# Questions to Assess Learning    /25\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"mcHVLovJXdxA"},"source":["4 mark: What is the difference between one-hot and embedding? Provide examples of each.\r\n","\r\n","4 mark: What is a word-embedding space? Sketch an appropriate 2D-plane with 4 words of your choosing.  \r\n","\r\n","2 mark: List the set of 3-grams that can be constructed from the following sentence \"The dog ran to my home\".\r\n","\r\n","1 mark: Define an embedding layer in your own words.\r\n","\r\n","5 mark: What is the word2vec algorithm? What is the GloVe algorithm? Does it matter when we use one over the other? Why or why not? \r\n","\r\n","2 mark: Do we freeze the embedding layer? If yes, why and when? If no, why not?\r\n","\r\n","2 mark: Repeat the last section (where our validation accuracy stalls in the low 50s after the horizontal separators) but this time increase the number of training samples. Do pre-trained word embeddings still outperform jointly learned embeddings? Discuss. \r\n","\r\n","5 mark: Professor Yap Boum II is the co-Founder of Kmerpad, and the Regional Representative of Epicentre Africa, the research arm of Médecins sans Frontières (MSF), known also as Doctors Without Borders. He is currently based in Yaoundé, Cameroon. \r\n","\r\n","In all his work, Boum is inspired by the vision of a healthy and wealthy Africa. He aims to advance research and innovative solutions and to promote the creation of a critical mass of young Africans to address the social and public health challenges Africa faces.\r\n","\r\n","Considering Covid-19 and other active epidemics, Professor Boum asks you to develop a brief set of Ai guidelines to be added to an online database. What would be the focus of your Ai project, what ethical guidelines would you include, how would your guidelines take bias (as discussed in this course) into consideration, and how might you balance this while addressing this request and need for Africa-centric policies?\r\n","\r\n","To begin, familiarize yourself with a few current Ai ethics policies and guidelines:\r\n","\r\n","https://inventory.algorithmwatch.org/about\r\n","\r\n","https://www.pt-ai.org/TG-ELS/policy/ \r\n","\r\n","https://www.brookings.edu/blog/africa-in-focus/2020/03/20/coronavirus-amid-the-global-pandemic-lessons-for-africa/\r\n","\r\n","\r\n","---\r\n","\r\n"]}]}