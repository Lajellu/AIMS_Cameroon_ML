{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.2"},"colab":{"name":"Copy of Lab04","private_outputs":true,"provenance":[{"file_id":"https://github.com/YorkU-Cameroon/labs/blob/main/Lab04.ipynb","timestamp":1610729324219}],"collapsed_sections":[],"toc_visible":true},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"Qb7ewDNw3lh8"},"source":["import keras\n","keras.__version__"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DuuU0_q93liL"},"source":["# Predicting house prices: a regression example\n","\n","This notebook contains the code samples found in Chapter 3, Section 6 of [Deep Learning with Python](https://www.manning.com/books/deep-learning-with-python?a_aid=keras&a_bid=76564dff). Note that the original text features far more content, in particular further explanations and figures: in this notebook, you will only find source code and related comments.\n","\n","----\n","\n","\n","In our two previous examples, we were considering classification problems, where the goal was to predict a single discrete label of an \n","input data point. Another common type of machine learning problem is \"regression\", which consists of predicting a continuous value instead \n","of a discrete label. For instance, predicting the temperature tomorrow, given meteorological data, or predicting the time that a \n","software project will take to complete, given its specifications.\n","\n","Do not mix up \"regression\" with the algorithm \"logistic regression\": confusingly, \"logistic regression\" is not a regression algorithm, \n","it is a classification algorithm."]},{"cell_type":"markdown","metadata":{"id":"ieMzqtu13liN"},"source":["## The Boston Housing Price dataset\n","\n","\n","We will be attempting to predict the median price of homes in a given Boston suburb in the mid-1970s, given a few data points about the \n","suburb at the time, such as the crime rate, the local property tax rate, etc.\n","\n","The dataset we will be using has another interesting difference from our two previous examples: it has very few data points, only 506 in \n","total, split between 404 training samples and 102 test samples, and each \"feature\" in the input data (e.g. the crime rate is a feature) has \n","a different scale. For instance some values are proportions, which take a value between 0 and 1, others take values between 1 and 12, \n","others between 0 and 100...\n","\n","Let's take a look at the data:"]},{"cell_type":"code","metadata":{"id":"exS9UWnJ3liO"},"source":["from keras.datasets import boston_housing\n","\n","(train_data, train_targets), (test_data, test_targets) =  boston_housing.load_data()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"M3c7xIVS3liW"},"source":["train_data.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zYka6Bwh3lie"},"source":["test_data.shape"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fqvxS4en3lil"},"source":["\n","As you can see, we have 404 training samples and 102 test samples. The data comprises 13 features. The 13 features in the input data are as \n","follow:\n","\n","1. Per capita crime rate.\n","2. Proportion of residential land zoned for lots over 25,000 square feet.\n","3. Proportion of non-retail business acres per town.\n","4. Charles River dummy variable (= 1 if tract bounds river; 0 otherwise).\n","5. Nitric oxides concentration (parts per 10 million).\n","6. Average number of rooms per dwelling.\n","7. Proportion of owner-occupied units built prior to 1940.\n","8. Weighted distances to five Boston employment centres.\n","9. Index of accessibility to radial highways.\n","10. Full-value property-tax rate per $10,000.\n","11. Pupil-teacher ratio by town.\n","12. 1000 * (Bk - 0.63) ** 2 where Bk is the proportion of Black people by town.\n","13. % lower status of the population.\n","\n","The targets are the median values of owner-occupied homes, in thousands of dollars:"]},{"cell_type":"code","metadata":{"id":"D4k_929o3lim"},"source":["train_targets"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tKMhhbV13liu"},"source":["\n","The prices are typically between \\$ 10,000 and \\$ 50,000. If that sounds cheap, remember this was the mid-1970s, and these prices are not \n","inflation-adjusted.\n","\n","*NOTE: These house prices are also in USD. So, 10,000 \\$ USD in 2020 is 5,397,002 \\$ XAF in Cameroon - but 10,000 \\$ USD in 1970 is 68,163 \\$ USD in 2020 which puts Cameroon at 36,753,067 \\$ XAF.*\n"]},{"cell_type":"markdown","metadata":{"id":"4siItIDc3liv"},"source":["## Preparing the data\n","\n","\n","It would be problematic to feed into a neural network values that all take wildly different ranges. The network might be able to \n","automatically adapt to such heterogeneous data, but it would definitely make learning more difficult. A widespread best practice to deal \n","with such data is to do feature-wise normalization: for each feature in the input data (a column in the input data matrix), we \n","will subtract the mean of the feature and divide by the standard deviation, so that the feature will be centered around 0 and will have a \n","unit standard deviation. This is easily done in Numpy:"]},{"cell_type":"code","metadata":{"id":"Fx3A2MkC3liw"},"source":["mean = train_data.mean(axis=0)\n","# Note that \"train_data -= mean\" is the same as \"train_data = train_data - mean\"\n","# The \"/=\" operation is the same but with division.\n","train_data -= mean \n","std = train_data.std(axis=0)\n","train_data /= std\n","\n","test_data -= mean\n","test_data /= std"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yd5J0vde3li4"},"source":["\n","Note that the quantities that we use for normalizing the test data have been computed using the training data. We should never use in our \n","workflow any quantity computed on the test data, even for something as simple as data normalization."]},{"cell_type":"markdown","metadata":{"id":"xRnyqiO_3li6"},"source":["## Building our network\n","\n","\n","Because so few samples are available, we will be using a very small network with two \n","hidden layers, each with 64 units. In general, the less training data you have, the worse overfitting will be, and using \n","a small network is one way to mitigate overfitting."]},{"cell_type":"code","metadata":{"id":"Ci-QE68x3li8"},"source":["from keras import models\n","from keras import layers\n","\n","def build_model():\n","    # Because we will need to instantiate\n","    # the same model multiple times,\n","    # we use a function to construct it.\n","    model = models.Sequential()\n","    model.add(layers.Dense(64, activation='relu',\n","                           input_shape=(train_data.shape[1],)))\n","    model.add(layers.Dense(64, activation='relu'))\n","    model.add(layers.Dense(1))\n","    model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])\n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"q4MC2qXm3ljD"},"source":["\n","Our network ends with a single unit, and no activation (i.e. it will be linear layer). \n","This is a typical setup for scalar regression (i.e. regression where we are trying to predict a single continuous value). \n","Applying an activation function would constrain the range that the output can take; for instance if \n","we applied a `sigmoid` activation function to our last layer, the network could only learn to predict values between 0 and 1. Here, because \n","the last layer is purely linear, the network is free to learn to predict values in any range.\n","\n","Note that we are compiling the network with the `mse` loss function -- Mean Squared Error, the square of the difference between the \n","predictions and the targets, a widely used loss function for regression problems.\n","\n","We are also monitoring a new metric during training: `mae`. This stands for Mean Absolute Error. It is simply the absolute value of the \n","difference between the predictions and the targets. For instance, a MAE of 0.5 on this problem would mean that our predictions are off by \n","\\$500 on average."]},{"cell_type":"markdown","metadata":{"id":"1CxaDvxU3ljE"},"source":["## Validating our approach using K-fold validation\n","\n","\n","To evaluate our network while we keep adjusting its parameters (such as the number of epochs used for training), we could simply split the \n","data into a training set and a validation set, as we were doing in our previous examples. However, because we have so few data points, the \n","validation set would end up being very small (e.g. about 100 examples). A consequence is that our validation scores may change a lot \n","depending on _which_ data points we choose to use for validation and which we choose for training, i.e. the validation scores may have a \n","high _variance_ with regard to the validation split. This would prevent us from reliably evaluating our model.\n","\n","The best practice in such situations is to use K-fold cross-validation. It consists of splitting the available data into K partitions \n","(typically K=4 or 5), then instantiating K identical models, and training each one on K-1 partitions while evaluating on the remaining \n","partition. The validation score for the model used would then be the average of the K validation scores obtained."]},{"cell_type":"markdown","metadata":{"id":"1-ZfqWmc3ljG"},"source":["In terms of code, this is straightforward:"]},{"cell_type":"code","metadata":{"id":"D1fN7AcL3ljI"},"source":["import numpy as np\n","\n","k = 4\n","num_val_samples = len(train_data) // k\n","num_epochs = 100\n","all_scores = []\n","for i in range(k):\n","    print('processing fold #', i)\n","    # Prepare the validation data: data from partition # k\n","    val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\n","    val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n","\n","    # Prepare the training data: data from all other partitions\n","    partial_train_data = np.concatenate(\n","        [train_data[:i * num_val_samples],\n","         train_data[(i + 1) * num_val_samples:]],\n","        axis=0)\n","    partial_train_targets = np.concatenate(\n","        [train_targets[:i * num_val_samples],\n","         train_targets[(i + 1) * num_val_samples:]],\n","        axis=0)\n","\n","    # Build the Keras model (already compiled)\n","    model = build_model()\n","    # Train the model (in silent mode, verbose=0)\n","    model.fit(partial_train_data, partial_train_targets,\n","              epochs=num_epochs, batch_size=1, verbose=0)\n","    # Evaluate the model on the validation data\n","    val_mse, val_mae = model.evaluate(val_data, val_targets, verbose=0)\n","    all_scores.append(val_mae)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"T-zmKoMd3ljP"},"source":["# let's see our mae (mean absolute error) for each fold\r\n","all_scores"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ghj7o8M73ljV"},"source":["# what is the mean?\r\n","np.mean(all_scores)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"csXF9mhz3ljc"},"source":["\n","As you can notice, the different runs do indeed show rather different validation scores, from 2.1 to 2.9. Their average (2.4) is a much more \n","reliable metric than any single of these scores -- that's the entire point of K-fold cross-validation. In this case, we are off by \\$2,400 on \n","average, which is still significant considering that the prices range from \\$10,000 to \\$50,000. \n","\n","Let's try training the network for a bit longer: 500 epochs. To keep a record of how well the model did at each epoch, we will modify our training loop \n","to save the per-epoch validation score log:"]},{"cell_type":"code","metadata":{"id":"sLkC-voZ3ljd"},"source":["from keras import backend as K\n","\n","# Some memory clean-up\n","K.clear_session()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CHzE_0rD3ljk"},"source":["# Instructor's Note: This cell took me about 11 minutes to run. Because of this,\n","# and to avoid delays, I have included the cell outputs for the rest of the lab\n","# so that students do not need to run the rest of the cells. \n","\n","num_epochs = 500\n","all_mae_histories = []\n","for i in range(k):\n","    print('processing fold #', i)\n","    # Prepare the validation data: data from partition # k\n","    val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\n","    val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n","\n","    # Prepare the training data: data from all other partitions\n","    partial_train_data = np.concatenate(\n","        [train_data[:i * num_val_samples],\n","         train_data[(i + 1) * num_val_samples:]],\n","        axis=0)\n","    partial_train_targets = np.concatenate(\n","        [train_targets[:i * num_val_samples],\n","         train_targets[(i + 1) * num_val_samples:]],\n","        axis=0)\n","\n","    # Build the Keras model (already compiled)\n","    model = build_model()\n","    # Train the model (in silent mode, verbose=0)\n","    history = model.fit(partial_train_data, partial_train_targets,\n","                        validation_data=(val_data, val_targets),\n","                        epochs=num_epochs, batch_size=1, verbose=0)\n","    mae_history = history.history['val_mae']\n","    all_mae_histories.append(mae_history)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4dPpBD503ljv"},"source":["We can then compute the average of the per-epoch MAE scores for all folds:"]},{"cell_type":"code","metadata":{"id":"rTAgMtiv3ljw"},"source":["average_mae_history = [\n","    np.mean([x[i] for x in all_mae_histories]) for i in range(num_epochs)]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"J_AkC60R3lj4"},"source":["Let's plot this:"]},{"cell_type":"code","metadata":{"id":"itri6V7T3lj5"},"source":["import matplotlib.pyplot as plt\n","\n","plt.plot(range(1, len(average_mae_history) + 1), average_mae_history)\n","plt.xlabel('Epochs')\n","plt.ylabel('Validation MAE')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7D5Q-gQ83lj_"},"source":["\n","It may be a bit hard to see the plot due to scaling issues and relatively high variance. Let's:\n","\n","* Omit the first 10 data points, which are on a different scale from the rest of the curve.\n","* Replace each point with an exponential moving average of the previous points, to obtain a smooth curve."]},{"cell_type":"code","metadata":{"id":"4tNOYA-W3lkA"},"source":["def smooth_curve(points, factor=0.9):\n","  smoothed_points = []\n","  for point in points:\n","    if smoothed_points:\n","      previous = smoothed_points[-1]\n","      smoothed_points.append(previous * factor + point * (1 - factor))\n","    else:\n","      smoothed_points.append(point)\n","  return smoothed_points\n","\n","smooth_mae_history = smooth_curve(average_mae_history[10:])\n","\n","plt.plot(range(1, len(smooth_mae_history) + 1), smooth_mae_history)\n","plt.xlabel('Epochs')\n","plt.ylabel('Validation MAE')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-ardJAWb3lkG"},"source":["\n","According to this plot, it seems that validation MAE stops improving significantly after 80 epochs. Past that point, we start overfitting.\n","\n","Once we are done tuning other parameters of our model (besides the number of epochs, we could also adjust the size of the hidden layers), we \n","can train a final \"production\" model on all of the training data, with the best parameters, then look at its performance on the test data:"]},{"cell_type":"code","metadata":{"id":"Hfr9eHQX3lkH"},"source":["# Get a fresh, compiled model.\n","model = build_model()\n","# Train it on the entirety of the data.\n","model.fit(train_data, train_targets,\n","          epochs=80, batch_size=16, verbose=0)\n","test_mse_score, test_mae_score = model.evaluate(test_data, test_targets)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PQay2ItB3lkN"},"source":["test_mae_score"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FpBjIl9p3lkT"},"source":["We are still off by about \\$2,550."]},{"cell_type":"markdown","metadata":{"id":"twRkeZ393lkU"},"source":["## Wrapping up\n","\n","\n","Here's what you should take away from this example:\n","\n","* Regression is done using different loss functions from classification; Mean Squared Error (MSE) is a commonly used loss function for \n","regression.\n","* Similarly, evaluation metrics to be used for regression differ from those used for classification; naturally the concept of \"accuracy\" \n","does not apply for regression. A common regression metric is Mean Absolute Error (MAE).\n","* When features in the input data have values in different ranges, each feature should be scaled independently as a preprocessing step.\n","* When there is little data available, using K-Fold validation is a great way to reliably evaluate a model.\n","* When little training data is available, it is preferable to use a small network with very few hidden layers (typically only one or two), \n","in order to avoid severe overfitting.\n","\n","This example concludes our series of three introductory practical examples. You are now able to handle common types of problems with vector data input:\n","\n","* Binary (2-class) classification.\n","* Multi-class, single-label classification.\n","* Scalar regression."]},{"cell_type":"markdown","metadata":{"id":"36k3mKqFDiIF"},"source":["---\r\n","\r\n","##Lab Questions\r\n","* **Question 1**: What information is contained in a single row of train_data? (1 Mark)\r\n","\r\n","Answer: The normalized values for the 13 fields.\r\n","\r\n","* **Question 2**: What is the difference between classification and regression problems? (1 Mark)\r\n","\r\n","Answer: Classification has a finite number of output classes while regression uses have real (continuous) valued output\r\n","\r\n","* **Question 3**: If our model predicts that a house has a price of $32,000,when in fact is has a price of \\$24,000, what would the Absolute Error on this observation be? What about the Squared Error? (1 Mark)\r\n","\r\n","Answer: It would be The absolute error would be 32,000 - 24,000 = 8,000 and the Squared Error is 8,000^2 = 64,000\r\n","\r\n","* **Question 4**: What is the advantage of K fold cross validation over using a single fold? (1 Mark)\r\n","\r\n","Anser: For cases where datasets are small K-Fold cross validation allows us to get an average error accorss multiple validation sets, instead of a single value from one set as variance on small samples is likely to be higher based on which samples end up in the validation set, because each sample will have a higher weight."]},{"cell_type":"markdown","metadata":{"id":"4j2z1y5YRJPm"},"source":["This lab mentioned that no quantity computed on the test data should be used in the workflow. This would be an example of data leakage. Read [this article on Kaggle about data leakage](https://www.kaggle.com/dansbecker/data-leakage) up to and including the section called \"Leaky Validation Strategy\". \r\n","\r\n","\r\n","* **Question 5**: What impact can data leakage have on our validation score relative to how well our model will perform once deployed? (1 Mark)\r\n","\r\n","Answer: We may get exceptionally high scores for validation but very poor performance when deployed.\r\n","\r\n","* **Question 6**: Name and briefly decsribe the two categories of data leakage the author identifies. Give an example of each (3 Marks).\r\n","\r\n","Answer: He identifies leaky input values that are determined after the target value has been determined. Example: if antibiotics was given, which happens after the infection has been identified. He also identifies leaky validation statigies such as using the mean and std of the test data to normalize it. We do will not have that information at deployment time and will have to use the mean and std of the training data."]},{"cell_type":"markdown","metadata":{"id":"pprWowMWGye1"},"source":["**Question 7**: Write code in the cell below to create a new model (see specifics in the comment below). (2 Marks)"]},{"cell_type":"code","metadata":{"id":"5TPlNm-uFRMt"},"source":["def build_model_a():\r\n","    model_a = models.Sequential()\r\n","\r\n","# your code goes below, and should add layers to compile model_a so that it has\r\n","# 3 hidden layers of 32 units each. It should use relu activations and rmsprop as the\r\n","# optimizer. Loss should be mse.\r\n","\r\n","    model_a.add(layers.Dense(32, activation='relu',\r\n","                           input_shape=(train_data.shape[1],)))\r\n","    model_a.add(layers.Dense(32, activation='relu'))\r\n","    model_a.add(layers.Dense(32, activation='relu'))\r\n","    model_a.add(layers.Dense(1))\r\n","    model_a.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])\r\n","    return model_a"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"camss3F7YFd4"},"source":["Recall that at the start of this lab we standardized our training and testing data by subtracting each feature's mean from itself and dividing each feature by its standard deviation. In the next question we will test whether this affects how quickly our models improve.\r\n","\r\n","* **Question 8**: Write code in the next cell that will train model_a (defined in question 7) on the standardized training data (train_data and train_targets). Then, in the cell after that, create a second model that is identical to model_a, and train it on the unscaled data. (4 marks)"]},{"cell_type":"code","metadata":{"id":"Ohpk9-q92yjn"},"source":["# your code training (i.e., fitting) model_a on the standardized data goes here.\n","# Train it for 50 epochs with batch size of 16, verbose=1\n","\n","k = 4\n","num_val_samples = len(train_data) // k\n","num_epochs = 50\n","all_scores = []\n","for i in range(k):\n","    print('processing fold #', i)\n","    # Prepare the validation data: data from partition # k\n","    val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\n","    val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n","\n","    # Prepare the training data: data from all other partitions\n","    partial_train_data = np.concatenate(\n","        [train_data[:i * num_val_samples],\n","         train_data[(i + 1) * num_val_samples:]],\n","        axis=0)\n","    partial_train_targets = np.concatenate(\n","        [train_targets[:i * num_val_samples],\n","         train_targets[(i + 1) * num_val_samples:]],\n","        axis=0)\n","\n","    # Build the Keras model (already compiled)\n","    model_a = build_model_a()\n","    # Train the model (in silent mode, verbose=1)\n","    history_a = model_a.fit(partial_train_data, partial_train_targets,\n","              epochs=num_epochs, batch_size=16, verbose=1)\n","    # Evaluate the model on the validation data\n","    val_mse, val_mae = model_a.evaluate(val_data, val_targets, verbose=1)\n","    all_scores.append(val_mae)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MgXA2b7CTpSF"},"source":["# Here's the original data without standardizing\r\n","(train_data_raw, train_targets_raw), (test_data_raw, test_targets_raw) = boston_housing.load_data()\r\n","\r\n","# your code creating a model identical to model_a, but called model_b, goes here\r\n","\r\n","def build_model_b():\r\n","    model_b = models.Sequential()\r\n","\r\n","    model_b.add(layers.Dense(32, activation='relu',\r\n","                           input_shape=(train_data.shape[1],)))\r\n","    model_b.add(layers.Dense(32, activation='relu'))\r\n","    model_b.add(layers.Dense(32, activation='relu'))\r\n","    model_b.add(layers.Dense(1))\r\n","    model_b.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])\r\n","    return model_b\r\n","\r\n","# your code training model_b on the non-standardized data goes below. Train it\r\n","# with the same arguments as model_a.\r\n","\r\n","k = 4\r\n","num_val_samples = len(train_data_raw) // k\r\n","num_epochs = 50\r\n","all_scores = []\r\n","for i in range(k):\r\n","    print('processing fold #', i)\r\n","    # Prepare the validation data: data from partition # k\r\n","    val_data_raw = train_data_raw[i * num_val_samples: (i + 1) * num_val_samples]\r\n","    val_targets_raw = train_targets_raw[i * num_val_samples: (i + 1) * num_val_samples]\r\n","\r\n","    # Prepare the training data: data from all other partitions\r\n","    partial_train_data_raw = np.concatenate(\r\n","        [train_data_raw[:i * num_val_samples],\r\n","         train_data_raw[(i + 1) * num_val_samples:]],\r\n","        axis=0)\r\n","    partial_train_targets_raw = np.concatenate(\r\n","        [train_targets_raw[:i * num_val_samples],\r\n","         train_targets_raw[(i + 1) * num_val_samples:]],\r\n","        axis=0)\r\n","\r\n","    # Build the Keras model (already compiled)\r\n","    model_b = build_model_b()\r\n","    # Train the model (in silent mode, verbose=1)\r\n","    history_b = model_b.fit(partial_train_data_raw, partial_train_targets_raw,\r\n","              epochs=num_epochs, batch_size=16, verbose=1)\r\n","    # Evaluate the model on the validation data\r\n","    val_mse, val_mae = model_b.evaluate(val_data_raw, val_targets_raw, verbose=1)\r\n","    all_scores.append(val_mae)\r\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Wz75eACIjanu"},"source":["Let's check our results. If you have completed the previous questions correctly, the following cell should run without errors and compare the training loss of our models.\r\n","\r\n","* **Question 9**: Based on the results of the cell below, what affect, if any, did standardizing our features have? (1 Mark)\r\n","\r\n","Answer: Given the same amount of training the normalized data prouced a model that was closer to the target values by almost 4x."]},{"cell_type":"code","metadata":{"id":"5VQ36GJGf-l5"},"source":["import numpy as np\r\n","print(\"Average training loss over last 5 epochs:\") \r\n","\r\n","print(\"model_a:\", np.mean(history_a.history['loss'][-5:]))\r\n","print(\"model_b:\", np.mean(history_b.history['loss'][-5:]))\r\n","\r\n","#print(\"model_a:\", np.mean(model_a.history.history['loss'][-5:]))\r\n","\r\n","#print(\"model_a:\", np.mean(model_a.history.history['loss'][-5:]))\r\n","print(\"model_b summary: \")\r\n","print(model_b.summary())\r\n","print(\"model_b history keys available: \")\r\n","print(model_b.history.history.keys())\r\n","print()\r\n","print(\"model_a summary: \")\r\n","print(model_a.summary())\r\n","print(\"model_a history keys available: \")\r\n","print(model_a.history.history.keys())\r\n","print()\r\n","print(\"history keys available: \", history.history.keys())\r\n","print(\"history keys='loss' available: \", history.history['loss'])\r\n","\r\n","# model_b_get=model_b.get(loss)\r\n","# if model_b_get:\r\n","#   print(\"model_b:\", np.mean(model_b.history.history['loss'][-5:]))\r\n","# else:\r\n","#   print(model_b.history)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nYBDg9iZk3fX"},"source":["* **Question 10**: Use Matplotlib to plot the training loss of the two models on the same plot. The plot should have x and y axis labels, a title, and a legend. (4 marks)"]},{"cell_type":"code","metadata":{"id":"ClLY3oRwIif0"},"source":["plt.figure(1)  \r\n","\r\n","# summarize history for accuracy  \r\n","\r\n","plt.subplot(111)  \r\n","plt.plot(history_a.history['loss'])    # // train loss\r\n","plt.plot(history_b.history['loss'])    # // train loss\r\n","#plt.plot(history_a.history['val_loss'])  // test loss\r\n","plt.title('MODEL LOSS')  \r\n","plt.ylabel('loss')  \r\n","plt.xlabel('epoch')  \r\n","plt.legend(['a', 'b'], loc='upper right')  \r\n","\r\n","#  # summarize history for loss  \r\n","\r\n","#  plt.subplot(222)  \r\n","#  plt.plot(history_b.history['loss'])  \r\n","#  #plt.plot(history_b.history['val_loss'])  \r\n","#  plt.title('MODEL_B LOSS')  \r\n","#  plt.ylabel('loss')  \r\n","#  plt.xlabel('epoch')  \r\n","#  plt.legend(['train', 'test'], loc='upper left')  \r\n","#  plt.show()  "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ql0kvA2MkrAi"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ut1YP_bHpVHI"},"source":["* **Question 10**: Consider the list of features included in the dataset (see the start of the lab). Choose two features and answer the following question about each: (4 Marks total)\r\n","> * Would you expect this feature to be useful for predicting house prices? Why or why not? If it's useful, is this because of the feature itself, or something we might expect the feature to be correlated with?\r\n","\r\n","Answer: Per capita crime rate, should be useful for predictin house prices because in areas where there is more crime people are less likely to want to buy houses and thus less demand so lower prices.\r\n","\r\n","Full-value property-tax rate per $10,000 is likely based off the price of the house. \r\n"]},{"cell_type":"code","metadata":{"id":"M5CDWLIgmoud"},"source":[""],"execution_count":null,"outputs":[]}]}