{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Lab05","provenance":[{"file_id":"https://github.com/YorkU-Cameroon/labs/blob/main/Lab05.ipynb","timestamp":1610743039976}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"hbud_VembfGr"},"source":["# Setup"]},{"cell_type":"code","metadata":{"id":"JbvVDwMPTwt9"},"source":["import keras\n","keras.__version__"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AG2CUuJ-aJf0"},"source":["# Overfitting and underfitting"]},{"cell_type":"markdown","metadata":{"id":"NdGqBYd2Txwe"},"source":["This notebook contains the code samples found in Chapter 3, Section 6 of [Deep Learning with Python](https://www.manning.com/books/deep-learning-with-python?a_aid=keras&a_bid=76564dff). Note that the original text features far more content, in particular further explanations and figures: in this notebook, you will only find source code and related comments.\n","\n","----\n","\n","\n","In all the examples we saw in the previous chapter -- movie review sentiment prediction, topic classification, and house price regression -- \n","we could notice that the performance of our model on the held-out validation data would always peak after a few epochs and would then start \n","degrading, i.e. our model would quickly start to _overfit_ to the training data. Overfitting happens in every single machine learning \n","problem. Learning how to deal with overfitting is essential to mastering machine learning.\n","\n","The fundamental issue in machine learning is the tension between optimization and generalization. \"Optimization\" refers to the process of \n","adjusting a model to get the best performance possible on the training data (the \"learning\" in \"machine learning\"), while \"generalization\" \n","refers to how well the trained model would perform on data it has never seen before. The goal of the game is to get good generalization, of \n","course, but you do not control generalization; you can only adjust the model based on its training data.\n","\n","\n","\n","---\n","\n","\n","At the **beginning of training, optimization and generalization are correlated**: the lower your loss on training data, the lower your loss on \n","test data. While this is happening, **your model is said to be _under-fit_**: there is still progress to be made; the network hasn't yet modeled all relevant patterns in the training data.\n","\n","**After a certain number of iterations on the training data, generalization stops improving**: validation metrics stall then start degrading. **The model is starting to _over-fit_**: it is starting to learn patterns that are specific to the training data but that are misleading or irrelevant when it comes to new data.\n","\n","\n","\n","---\n","\n","\n","\n","To prevent a model from learning misleading or irrelevant patterns found in the training data, _the best solution is of course to get \n","more training data_. A model trained on more data will naturally generalize better. When that is no longer possible, the next best solution \n","is to modulate the quantity of information that your model is allowed to store, or to add constraints on what information it is allowed to \n","store. If a network can only afford to memorize a small number of patterns, the optimization process will force it to focus on the most \n","prominent patterns, which have a better chance of generalizing well.\n","\n","The processing of fighting overfitting in this way is called _regularization_. Let's review some of the most common regularization \n","techniques, and let's apply them in practice to improve our movie classification model from  the previous chapter."]},{"cell_type":"markdown","metadata":{"id":"Infcd4IWT3KZ"},"source":["Note: in this notebook we will be using the IMDB test set as our validation set. It doesn't matter in this context.\n","\n","Let's prepare the data using the code from Chapter 3, Section 5:"]},{"cell_type":"code","metadata":{"id":"70GU6JLOT4oQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610743354083,"user_tz":300,"elapsed":13150,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"be624168-f921-44a0-9bf6-a9b39a5fd9e3"},"source":["from keras.datasets import imdb\n","import numpy as np\n","\n","(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)\n","\n","def vectorize_sequences(sequences, dimension=10000): #10000\n","    # Create an all-zero matrix of shape (len(sequences), dimension)\n","    results = np.zeros((len(sequences), dimension))\n","    for i, sequence in enumerate(sequences):\n","        results[i, sequence] = 1.  # set specific indices of results[i] to 1s\n","    return results\n","\n","# Our vectorized training data\n","x_train = vectorize_sequences(train_data)\n","# Our vectorized test data\n","x_test = vectorize_sequences(test_data)\n","# Our vectorized labels\n","y_train = np.asarray(train_labels).astype('float32')\n","y_test = np.asarray(test_labels).astype('float32')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17465344/17464789 [==============================] - 1s 0us/step\n"],"name":"stdout"},{"output_type":"stream","text":["<string>:6: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/datasets/imdb.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  x_train, y_train = np.array(xs[:idx]), np.array(labels[:idx])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/datasets/imdb.py:160: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  x_test, y_test = np.array(xs[idx:]), np.array(labels[idx:])\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"65TT0I6aaYkb"},"source":["# Fighting overfitting"]},{"cell_type":"markdown","metadata":{"id":"qNwJl7lzbqpe"},"source":["## Reducing the network's size"]},{"cell_type":"markdown","metadata":{"id":"2a7sE49tT8Tj"},"source":["The simplest way to prevent overfitting is to reduce the size of the model, i.e. the number of learnable parameters in the model (which is \n","determined by the number of layers and the number of units per layer). In deep learning, the number of learnable parameters in a model is \n","often referred to as the model's \"capacity\". Intuitively, a model with more parameters will have more \"memorization capacity\" and therefore \n","will be able to easily learn a perfect dictionary-like mapping between training samples and their targets, a mapping without any \n","generalization power. For instance, a model with 500,000 binary parameters could easily be made to learn the class of every digits in the \n","MNIST training set: we would only need 10 binary parameters for each of the 50,000 digits. Such a model would be useless for classifying \n","new digit samples. Always keep this in mind: deep learning models tend to be good at fitting to the training data, but the real challenge \n","is generalization, not fitting.\n","\n","On the other hand, if the network has limited memorization resources, it will not be able to learn this mapping as easily, and thus, in \n","order to minimize its loss, it will have to resort to learning compressed representations that have predictive power regarding the targets \n","-- precisely the type of representations that we are interested in. At the same time, keep in mind that you should be using models that have \n","enough parameters that they won't be underfitting: your model shouldn't be starved for memorization resources. There is a compromise to be \n","found between \"too much capacity\" and \"not enough capacity\".\n","\n","Unfortunately, there is no magical formula to determine what the right number of layers is, or what the right size for each layer is. You \n","will have to evaluate an array of different architectures (on your validation set, not on your test set, of course) in order to find the \n","right model size for your data. The general workflow to find an appropriate model size is to start with relatively few layers and \n","parameters, and start increasing the size of the layers or adding new layers until you see diminishing returns with regard to the \n","validation loss.\n","\n","Let's try this on our movie review classification network. Our original network was as such:"]},{"cell_type":"code","metadata":{"id":"gbJY5fuCT-AV","executionInfo":{"status":"ok","timestamp":1610743581457,"user_tz":300,"elapsed":1042,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}}},"source":["from keras import models\n","from keras import layers\n","\n","original_model = models.Sequential()\n","original_model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n","original_model.add(layers.Dense(16, activation='relu'))\n","original_model.add(layers.Dense(1, activation='sigmoid'))\n","\n","original_model.compile(optimizer='rmsprop',\n","                       loss='binary_crossentropy',\n","                       metrics=['acc'])"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QYS_Jr-DT_QS"},"source":["Now let's try to replace it with this smaller network:"]},{"cell_type":"code","metadata":{"id":"Letba-oBUAZy","executionInfo":{"status":"ok","timestamp":1610743590566,"user_tz":300,"elapsed":565,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}}},"source":["smaller_model = models.Sequential()\n","smaller_model.add(layers.Dense(4, activation='relu', input_shape=(10000,)))\n","smaller_model.add(layers.Dense(4, activation='relu'))\n","smaller_model.add(layers.Dense(1, activation='sigmoid'))\n","\n","smaller_model.compile(optimizer='rmsprop',\n","                      loss='binary_crossentropy',\n","                      metrics=['acc'])"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"EtiVTaj-UIzY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610743632138,"user_tz":300,"elapsed":39798,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"4983cde7-ba9c-48e2-e825-e054caa3ac0f"},"source":["original_hist = original_model.fit(x_train, y_train,\n","                                   epochs=20,\n","                                   batch_size=512,\n","                                   validation_data=(x_test, y_test))"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 3s 56ms/step - loss: 0.5468 - acc: 0.7477 - val_loss: 0.3427 - val_acc: 0.8728\n","Epoch 2/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.2665 - acc: 0.9112 - val_loss: 0.2888 - val_acc: 0.8868\n","Epoch 3/20\n","49/49 [==============================] - 2s 44ms/step - loss: 0.1944 - acc: 0.9357 - val_loss: 0.3359 - val_acc: 0.8662\n","Epoch 4/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1653 - acc: 0.9425 - val_loss: 0.2929 - val_acc: 0.8844\n","Epoch 5/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1429 - acc: 0.9494 - val_loss: 0.3089 - val_acc: 0.8798\n","Epoch 6/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1167 - acc: 0.9614 - val_loss: 0.3360 - val_acc: 0.8750\n","Epoch 7/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1079 - acc: 0.9636 - val_loss: 0.3620 - val_acc: 0.8694\n","Epoch 8/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.0935 - acc: 0.9699 - val_loss: 0.3770 - val_acc: 0.8702\n","Epoch 9/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.0810 - acc: 0.9755 - val_loss: 0.4038 - val_acc: 0.8677\n","Epoch 10/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.0726 - acc: 0.9782 - val_loss: 0.4455 - val_acc: 0.8623\n","Epoch 11/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.0674 - acc: 0.9798 - val_loss: 0.4775 - val_acc: 0.8594\n","Epoch 12/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.0537 - acc: 0.9852 - val_loss: 0.5127 - val_acc: 0.8561\n","Epoch 13/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.0459 - acc: 0.9879 - val_loss: 0.5413 - val_acc: 0.8549\n","Epoch 14/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.0391 - acc: 0.9905 - val_loss: 0.5519 - val_acc: 0.8553\n","Epoch 15/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.0347 - acc: 0.9916 - val_loss: 0.6127 - val_acc: 0.8506\n","Epoch 16/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.0320 - acc: 0.9923 - val_loss: 0.6269 - val_acc: 0.8522\n","Epoch 17/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.0244 - acc: 0.9944 - val_loss: 0.6794 - val_acc: 0.8506\n","Epoch 18/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.0230 - acc: 0.9950 - val_loss: 0.6984 - val_acc: 0.8502\n","Epoch 19/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.0173 - acc: 0.9962 - val_loss: 0.7335 - val_acc: 0.8491\n","Epoch 20/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.0153 - acc: 0.9966 - val_loss: 0.7749 - val_acc: 0.8489\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hHKHO79pUJoG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610743666775,"user_tz":300,"elapsed":71659,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"ffa86fc7-52c1-4781-8ef0-eb5b6dbd82ed"},"source":["smaller_model_hist = smaller_model.fit(x_train, y_train,\n","                                       epochs=20,\n","                                       batch_size=512,\n","                                       validation_data=(x_test, y_test))"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 3s 45ms/step - loss: 0.6239 - acc: 0.7373 - val_loss: 0.4999 - val_acc: 0.8588\n","Epoch 2/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.4412 - acc: 0.8844 - val_loss: 0.3804 - val_acc: 0.8746\n","Epoch 3/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.3183 - acc: 0.9102 - val_loss: 0.3186 - val_acc: 0.8840\n","Epoch 4/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.2495 - acc: 0.9223 - val_loss: 0.2951 - val_acc: 0.8870\n","Epoch 5/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.2079 - acc: 0.9335 - val_loss: 0.2796 - val_acc: 0.8905\n","Epoch 6/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.1828 - acc: 0.9390 - val_loss: 0.2779 - val_acc: 0.8903\n","Epoch 7/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.1690 - acc: 0.9443 - val_loss: 0.2847 - val_acc: 0.8869\n","Epoch 8/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.1487 - acc: 0.9503 - val_loss: 0.2928 - val_acc: 0.8837\n","Epoch 9/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.1348 - acc: 0.9572 - val_loss: 0.3020 - val_acc: 0.8828\n","Epoch 10/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.1253 - acc: 0.9607 - val_loss: 0.3109 - val_acc: 0.8811\n","Epoch 11/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.1159 - acc: 0.9640 - val_loss: 0.3228 - val_acc: 0.8788\n","Epoch 12/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.1038 - acc: 0.9687 - val_loss: 0.3375 - val_acc: 0.8766\n","Epoch 13/20\n","49/49 [==============================] - 2s 33ms/step - loss: 0.0977 - acc: 0.9687 - val_loss: 0.3509 - val_acc: 0.8748\n","Epoch 14/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.0959 - acc: 0.9718 - val_loss: 0.3660 - val_acc: 0.8730\n","Epoch 15/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.0815 - acc: 0.9761 - val_loss: 0.3826 - val_acc: 0.8708\n","Epoch 16/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.0759 - acc: 0.9785 - val_loss: 0.3983 - val_acc: 0.8685\n","Epoch 17/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.0742 - acc: 0.9798 - val_loss: 0.4169 - val_acc: 0.8657\n","Epoch 18/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.0693 - acc: 0.9815 - val_loss: 0.4352 - val_acc: 0.8640\n","Epoch 19/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.0638 - acc: 0.9829 - val_loss: 0.4528 - val_acc: 0.8632\n","Epoch 20/20\n","49/49 [==============================] - 2s 34ms/step - loss: 0.0577 - acc: 0.9854 - val_loss: 0.4739 - val_acc: 0.8614\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MoI1_0aQUMIv","executionInfo":{"status":"ok","timestamp":1610743666777,"user_tz":300,"elapsed":68486,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}}},"source":["epochs = range(1, 21)\n","original_val_loss = original_hist.history['val_loss']\n","smaller_model_val_loss = smaller_model_hist.history['val_loss']"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"x2KkGesoUHma"},"source":["\n","Here's a comparison of the validation losses of the original network and the smaller network. The dots are the validation loss values of \n","the smaller network, and the crosses are the initial network (remember: a lower validation loss signals a better model)."]},{"cell_type":"code","metadata":{"id":"wpv1ipwZUTWU","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1610743734498,"user_tz":300,"elapsed":1945,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"f6a169d5-c530-4d52-8627-dbadc2c7ab06"},"source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","def modelplot_Small():\n","  sns.scatterplot(x=epochs, y=original_val_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=smaller_model_val_loss, color=\"b\", marker='o', label='Smaller model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Validation loss')\n","  plt.legend()\n","\n","modelplot_Small()"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"4h73tiCEUVxE"},"source":["\n","As you can see, the smaller network starts overfitting later than the reference one (after 6 epochs rather than 4) and its performance \n","degrades much more slowly once it starts overfitting.\n","\n","Now, for kicks, let's add to this benchmark a network that has much more capacity, far more than the problem would warrant:"]},{"cell_type":"code","metadata":{"id":"jfSROzwCUXAa","executionInfo":{"status":"ok","timestamp":1610743820387,"user_tz":300,"elapsed":459,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}}},"source":["bigger_model = models.Sequential()\n","bigger_model.add(layers.Dense(512, activation='relu', input_shape=(10000,)))\n","bigger_model.add(layers.Dense(512, activation='relu'))\n","bigger_model.add(layers.Dense(1, activation='sigmoid'))\n","\n","bigger_model.compile(optimizer='rmsprop',\n","                     loss='binary_crossentropy',\n","                     metrics=['acc'])"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"vH_r-Bc3UYkE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610744066507,"user_tz":300,"elapsed":238982,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"2c9f1751-01f1-495d-b755-a7c37dba0e82"},"source":["bigger_model_hist = bigger_model.fit(x_train, y_train,\n","                                     epochs=20,\n","                                     batch_size=512,\n","                                     validation_data=(x_test, y_test))"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 12s 237ms/step - loss: 0.6169 - acc: 0.7045 - val_loss: 0.3866 - val_acc: 0.8283\n","Epoch 2/20\n","49/49 [==============================] - 12s 256ms/step - loss: 0.2182 - acc: 0.9150 - val_loss: 0.3261 - val_acc: 0.8703\n","Epoch 3/20\n","49/49 [==============================] - 11s 235ms/step - loss: 0.1424 - acc: 0.9439 - val_loss: 0.3343 - val_acc: 0.8825\n","Epoch 4/20\n","49/49 [==============================] - 12s 239ms/step - loss: 0.0690 - acc: 0.9762 - val_loss: 0.3225 - val_acc: 0.8781\n","Epoch 5/20\n","49/49 [==============================] - 13s 270ms/step - loss: 0.0240 - acc: 0.9967 - val_loss: 0.4166 - val_acc: 0.8819\n","Epoch 6/20\n","49/49 [==============================] - 11s 232ms/step - loss: 0.0039 - acc: 0.9998 - val_loss: 0.6624 - val_acc: 0.8809\n","Epoch 7/20\n","49/49 [==============================] - 12s 249ms/step - loss: 0.0440 - acc: 0.9952 - val_loss: 0.5917 - val_acc: 0.8762\n","Epoch 8/20\n","49/49 [==============================] - 12s 250ms/step - loss: 8.2219e-04 - acc: 1.0000 - val_loss: 0.7551 - val_acc: 0.8813\n","Epoch 9/20\n","49/49 [==============================] - 12s 245ms/step - loss: 8.7834e-05 - acc: 1.0000 - val_loss: 0.9253 - val_acc: 0.8797\n","Epoch 10/20\n","49/49 [==============================] - 13s 256ms/step - loss: 0.0544 - acc: 0.9960 - val_loss: 0.7105 - val_acc: 0.8757\n","Epoch 11/20\n","49/49 [==============================] - 11s 234ms/step - loss: 1.3114e-04 - acc: 1.0000 - val_loss: 0.8094 - val_acc: 0.8766\n","Epoch 12/20\n","49/49 [==============================] - 13s 271ms/step - loss: 2.2653e-05 - acc: 1.0000 - val_loss: 0.9342 - val_acc: 0.8779\n","Epoch 13/20\n","49/49 [==============================] - 12s 241ms/step - loss: 5.0673e-06 - acc: 1.0000 - val_loss: 1.0754 - val_acc: 0.8790\n","Epoch 14/20\n","49/49 [==============================] - 12s 251ms/step - loss: 8.3252e-07 - acc: 1.0000 - val_loss: 1.2126 - val_acc: 0.8792\n","Epoch 15/20\n","49/49 [==============================] - 12s 239ms/step - loss: 1.6769e-07 - acc: 1.0000 - val_loss: 1.3347 - val_acc: 0.8792\n","Epoch 16/20\n","49/49 [==============================] - 11s 234ms/step - loss: 4.5543e-08 - acc: 1.0000 - val_loss: 1.4172 - val_acc: 0.8796\n","Epoch 17/20\n","49/49 [==============================] - 11s 232ms/step - loss: 1.9683e-08 - acc: 1.0000 - val_loss: 1.4619 - val_acc: 0.8796\n","Epoch 18/20\n","49/49 [==============================] - 11s 232ms/step - loss: 1.2641e-08 - acc: 1.0000 - val_loss: 1.4907 - val_acc: 0.8797\n","Epoch 19/20\n","49/49 [==============================] - 12s 238ms/step - loss: 9.0794e-09 - acc: 1.0000 - val_loss: 1.5145 - val_acc: 0.8794\n","Epoch 20/20\n","49/49 [==============================] - 12s 236ms/step - loss: 7.1498e-09 - acc: 1.0000 - val_loss: 1.5294 - val_acc: 0.8796\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XXE6L0r3UapA"},"source":["Here's how the bigger network fares compared to the reference one. The dots are the validation loss values of the bigger network, and the \n","crosses are the initial network."]},{"cell_type":"code","metadata":{"id":"BOjYknAUUbky","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1610744066721,"user_tz":300,"elapsed":226672,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"1c8dd480-c6ab-42b7-c577-77acf4c2612d"},"source":["bigger_model_val_loss = bigger_model_hist.history['val_loss']\n","\n","def modelplot_Big():\n","  # f, ax = plt.subplots(figsize=(8,6))\n","  # sns.despine()\n","  sns.scatterplot(x=epochs, y=original_val_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=bigger_model_val_loss, color=\"b\", marker='o', label='Bigger model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Validation loss')\n","  plt.legend()\n","\n","modelplot_Big()"],"execution_count":10,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"GtjFIQR9WNX0"},"source":["\n","The bigger network starts overfitting almost right away, after just one epoch, and overfits much more severely. Its validation loss is also \n","more noisy.\n","\n","Meanwhile, here are the training losses for our two networks:"]},{"cell_type":"code","metadata":{"id":"V5LBeXpoWOfO","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1610744067008,"user_tz":300,"elapsed":211224,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"9df9a2d6-72e6-4992-fb6b-c2f48d1ee10c"},"source":["original_train_loss = original_hist.history['loss']\n","bigger_model_train_loss = bigger_model_hist.history['loss']\n","smaller_model_train_loss = smaller_model_hist.history['loss']\n","\n","def modelplot_Train():\n","  sns.scatterplot(x=epochs, y=original_train_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=bigger_model_train_loss, color=\"b\", marker='o', label='Bigger model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Training loss')\n","  plt.legend()\n","\n","modelplot_Train()"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Cy05NCiSWPtw"},"source":["As you can see, the bigger network gets its training loss near zero very quickly. The more capacity the network has, the quicker it will be \n","able to model the training data (resulting in a low training loss), but the more susceptible it is to overfitting (resulting in a large \n","difference between the training and validation loss)."]},{"cell_type":"markdown","metadata":{"id":"-3UfR0zGawbr"},"source":["## Adding weight regularization"]},{"cell_type":"markdown","metadata":{"id":"oLvj5uP3WQkF"},"source":["You may be familiar with _Occam's Razor_ principle: given two explanations for something, the explanation most likely to be correct is the \n","\"simplest\" one, the one that makes the least amount of assumptions. This also applies to the models learned by neural networks: given some \n","training data and a network architecture, there are multiple sets of weights values (multiple _models_) that could explain the data, and \n","simpler models are less likely to overfit than complex ones.\n","\n","A \"simple model\" in this context is a model where the distribution of parameter values has less entropy (or a model with fewer \n","parameters altogether, as we saw in the section above). Thus a common way to mitigate overfitting is to put constraints on the complexity \n","of a network by forcing its weights to only take small values, which makes the distribution of weight values more \"regular\". This is called \n","\"weight regularization\", and it is done by adding to the loss function of the network a _cost_ associated with having large weights. This \n","cost comes in two flavors:\n","\n","* L1 regularization, where the cost added is proportional to the _absolute value of the weights coefficients_ (i.e. to what is called the \n","\"L1 norm\" of the weights).\n","* L2 regularization, where the cost added is proportional to the _square of the value of the weights coefficients_ (i.e. to what is called \n","the \"L2 norm\" of the weights). L2 regularization is also called _weight decay_ in the context of neural networks. Don't let the different \n","name confuse you: weight decay is mathematically the exact same as L2 regularization.\n","\n","In Keras, weight regularization is added by passing _weight regularizer instances_ to layers as keyword arguments. Let's add L2 weight \n","regularization to our movie review classification network:"]},{"cell_type":"code","metadata":{"id":"hGW4djnaWRz2","executionInfo":{"status":"ok","timestamp":1610744067012,"user_tz":300,"elapsed":110156,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}}},"source":["from keras import regularizers\n","\n","l2_model = models.Sequential()\n","l2_model.add(layers.Dense(16, kernel_regularizer=regularizers.l2(0.001),\n","                          activation='relu', input_shape=(10000,)))\n","l2_model.add(layers.Dense(16, kernel_regularizer=regularizers.l2(0.001),\n","                          activation='relu'))\n","l2_model.add(layers.Dense(1, activation='sigmoid'))"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"IcW4-QyvWSc7","executionInfo":{"status":"ok","timestamp":1610744067014,"user_tz":300,"elapsed":106937,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}}},"source":["l2_model.compile(optimizer='rmsprop',\n","                 loss='binary_crossentropy',\n","                 metrics=['acc'])"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1tVNezvuWZJN"},"source":["`l2(0.001)` means that every coefficient in the weight matrix of the layer will add `0.001 * weight_coefficient_value` to the total loss of \n","the network. Note that because this penalty is _only added at training time_, the loss for this network will be much higher at training \n","than at test time.\n","\n","Here's the impact of our L2 regularization penalty:"]},{"cell_type":"code","metadata":{"id":"Ic3RU4m0WbjR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610744106154,"user_tz":300,"elapsed":108224,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"79b8c4fb-0af3-4090-a473-9a40a428791e"},"source":["l2_model_hist = l2_model.fit(x_train, y_train,\n","                             epochs=20,\n","                             batch_size=512,\n","                             validation_data=(x_test, y_test))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 3s 46ms/step - loss: 0.6109 - acc: 0.7114 - val_loss: 0.3830 - val_acc: 0.8816\n","Epoch 2/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.3251 - acc: 0.9075 - val_loss: 0.3605 - val_acc: 0.8732\n","Epoch 3/20\n","49/49 [==============================] - 2s 44ms/step - loss: 0.2696 - acc: 0.9234 - val_loss: 0.3371 - val_acc: 0.8860\n","Epoch 4/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.2441 - acc: 0.9325 - val_loss: 0.3368 - val_acc: 0.8883\n","Epoch 5/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.2284 - acc: 0.9405 - val_loss: 0.3497 - val_acc: 0.8836\n","Epoch 6/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.2190 - acc: 0.9442 - val_loss: 0.4097 - val_acc: 0.8608\n","Epoch 7/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.2141 - acc: 0.9468 - val_loss: 0.3648 - val_acc: 0.8787\n","Epoch 8/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.2146 - acc: 0.9447 - val_loss: 0.3661 - val_acc: 0.8784\n","Epoch 9/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.2017 - acc: 0.9538 - val_loss: 0.3960 - val_acc: 0.8702\n","Epoch 10/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.2042 - acc: 0.9499 - val_loss: 0.4006 - val_acc: 0.8697\n","Epoch 11/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.1944 - acc: 0.9529 - val_loss: 0.4448 - val_acc: 0.8566\n","Epoch 12/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.1899 - acc: 0.9559 - val_loss: 0.3953 - val_acc: 0.8723\n","Epoch 13/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1905 - acc: 0.9550 - val_loss: 0.3955 - val_acc: 0.8744\n","Epoch 14/20\n","49/49 [==============================] - 2s 43ms/step - loss: 0.1847 - acc: 0.9582 - val_loss: 0.4192 - val_acc: 0.8660\n","Epoch 15/20\n","49/49 [==============================] - 2s 45ms/step - loss: 0.1967 - acc: 0.9501 - val_loss: 0.4134 - val_acc: 0.8700\n","Epoch 16/20\n","49/49 [==============================] - 2s 51ms/step - loss: 0.1813 - acc: 0.9575 - val_loss: 0.4421 - val_acc: 0.8627\n","Epoch 17/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1780 - acc: 0.9617 - val_loss: 0.4190 - val_acc: 0.8692\n","Epoch 18/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1807 - acc: 0.9572 - val_loss: 0.4184 - val_acc: 0.8705\n","Epoch 19/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.1729 - acc: 0.9622 - val_loss: 0.4242 - val_acc: 0.8688\n","Epoch 20/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1751 - acc: 0.9596 - val_loss: 0.4403 - val_acc: 0.8655\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"eK8EKmk6Wduo","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1610744106380,"user_tz":300,"elapsed":106785,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"25a6d312-459b-4371-e344-c6ee695bf3c1"},"source":["l2_model_val_loss = l2_model_hist.history['val_loss']\n","\n","def modelplot_L2():\n","  sns.scatterplot(x=epochs, y=original_val_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=l2_model_val_loss, color=\"b\", marker='o', label='L2-regularized model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Validation loss')\n","  plt.legend()\n","\n","modelplot_L2()"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"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IpJRRZcIck3Lli019aaIZFXR9RGIiEhtSgQiIkVOiUBEpMgpEYiIRCgTE8ukSokgTQ466KB66yZOnEi3bt3o1asXQ4cO5cMPP8x4XCeddFKTO6PvuOMOXnnllZTfO95nkm7VhflS3UYkKpmYWCZVSgQR6tu3LxUVFSxdupTzzjuPm2++udF9du3alYHIGrZ7927uvPNOTjnllKzGIVIoMjGxTKqKMhHs2QMrV8KcOcH9nj3RvM+QIUNqSkwMHDiQysrKuNuVl5dz3XXXMWDAAG6++WbWrl3L8OHDOf744znxxBN57733AFi7di0DBw6kZ8+e3H777TVH3HPmzOHMM8+seb1Ro0YxZcqUeu9z/fXXU1ZWRvfu3Rk7dmzN+s6dO3PLLbdw3HHH8fTTT1NeXs706dOpqKigT58+9OnTh549e9ZM79hQfB988AGDBg2qiS+edevWccwxx1BeXk7Xrl259NJLeeWVVxg8eDClpaX87W9/A+Czzz7j7LPPplevXgwcOJClS5cCsHnzZoYNG0b37t256qqriB0Q+eijj9K/f3/69OnDtddey+7duxv/RxLJgKgnlklV0SWCPXtgxgzo2xeGDAnuZ8yILhlUe/jhhzn99NMbfL6yspI33niDiRMncs0113D//fezaNEiJkyYwA033AAEpZ5Hjx7NsmXL6NChQ5NjuPvuu2vOUObOnVvz4wpw6KGHsnjxYi666KKadWVlZSxZsoQlS5YwfPhwfv7znwMkjO/6669n2bJltG/fvsE41qxZw5gxY3jvvfd47733ePzxx5k/fz4TJkyoKcsxduxY+vbty9KlS/nVr37FZZddBsD48eM54YQTWL58Oeeccw7r168HglHCTz75JK+//jpLliyhpKQkbbWXRFIV9cQyqSq6AWWrV8Nll0FYvJMdO4Llnj3h6KOjec9HH32UioqKenMRxDr//PMpKSlh27ZtvPHGG5x//vk1z3311VcALFiwgOeeew6ASy65pOaHOVlPPfUUDz74ILt27WLjxo2sWLGipuz1hRde2OB+Tz75JIsXL+bll19OGN/rr79eM0/CD3/4w1oT2sTq0qVLrdLXQ4cOrSmLXV1ee/78+TWvdfLJJ7N582a2bt3KvHnzmDFjBgDf//73adOmDQCvvvoqixYtol+/fgDs2LGDb33rW036fESiEFvfLLaZKJeah4ouEWzcuDcJVNuxI1gfRSJ45ZVXuPvuu5k7d25NyefbbruNF154AdhbpbO6TPWePXto3bp1k6p37rfffuyJOaX58ssv623zwQcfMGHCBBYuXEibNm0oLy+vtV1DZbLfeecdxo0bx7x58ygpKWk0vurmo0Tqlr6OLYu9r30k7s7ll1/Or3/9633aXyQqiSaWyVZpm7qKrmmofXto0aL2uhYtgvXp9tZbb3Httdcyc+bMWkend999d02TS10HH3wwXbp0qSnx7O68/fbbQNDPUH2UPG3atJp9jjjiCFasWMFXX33Fli1bePXVV+u97tatWznwwANp1aoVH3/8MS+99FKj8W/ZsoWLL76YqVOn1kxGkyi+wYMH18SVarPMiSeeWPMac+bMoW3bthx88MF897vf5fHHHwfgpZde4vPPPweCUuDTp0/nk08+AYI+hmxcpSVS1/Dh9Y/8s1nfLJ6iSwSlpTB16t5k0KJFsFxamtrrbt++nQ4dOtTcJk6cyE033cS2bds4//zz6dOnDyNGjEjqtR577DEefvhhevfuTffu3Xn++ecB+N3vfsfEiRPp1asXa9asqSlX3bFjRy644AJ69OjBBRdcQN++feu9Zu/evenbty/HHHMMl1xyCYMHD240jueff54PP/yQq6++uqbTOFF8v//975k0aRI9e/bko48+Supvbci4ceNYtGgRvXr14tZbb+WRRx4Bgr6DefPm0b17d2bMmEGnTp2AYHKgX/7ylwwbNoxevXpx6qmnsnHjxpRiECkWRVeGGoKO4dWrg+ag9u2DJNAsD1Li9u3badGiBWbGtGnTeOKJJ2p+hKXpVIZaionKUNfRrFnQHxBV53BUFi1axKhRo3B3WrduzeTJk7MdkogUgKJMBPnqxBNPrGmPFxFJlzxoEElOvjVxSXbp+yKyV0EkgubNm7N582b955akuDubN2+mefPm2Q5FJCdE2jRkZsOB3wMlwB/d/Td1nr8XGBIufhP4lru3bur7dOjQgcrKSjZt2pRqyFIkmjdvvk+js6X45No851GILBGYWQkwCTgVqAQWmtlMd19RvY273xiz/b8C9a97TML+++9Ply5dUoxYRKS+6uqh1YPCYkcKF4oom4b6A2vc/X13/xqYBpyVYPuLgScijEdEpMnyoXpoqqJsGjoc2BCzXAkMiLehmR0BdAFmN/D8NcA1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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"3YXXn3TJWet0"},"source":["\n","\n","As you can see, the model with L2 regularization (dots) has become much more resistant to overfitting than the reference model (crosses), \n","even though both models have the same number of parameters.\n","\n","As alternatives to L2 regularization, you could use one of the following Keras weight regularizers:"]},{"cell_type":"code","metadata":{"id":"5bXZG6SCWf2B","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610744160960,"user_tz":300,"elapsed":440,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"822aeadc-b53c-43ef-9f13-3c672ecf5c44"},"source":["from keras import regularizers\n","\n","# L1 regularization\n","regularizers.l1(0.001)\n","\n","# L1 and L2 regularization at the same time\n","regularizers.l1_l2(l1=0.001, l2=0.001)"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.regularizers.L1L2 at 0x7f3e3f9d3da0>"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"sRjEst_wxdsX","executionInfo":{"status":"ok","timestamp":1610744165548,"user_tz":300,"elapsed":577,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}}},"source":["l1_model = models.Sequential()\n","l1_model.add(layers.Dense(16, kernel_regularizer=regularizers.l1(0.001),\n","                          activation='relu', input_shape=(10000,)))\n","l1_model.add(layers.Dense(16, kernel_regularizer=regularizers.l1(0.001),\n","                          activation='relu'))\n","l1_model.add(layers.Dense(1, activation='sigmoid'))"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zeyoe8TIxkkL","executionInfo":{"status":"ok","timestamp":1610744167761,"user_tz":300,"elapsed":464,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}}},"source":["l1_model.compile(optimizer='rmsprop',\n","                 loss='binary_crossentropy',\n","                 metrics=['acc'])"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"uV9RcPALx9uw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610744209016,"user_tz":300,"elapsed":38862,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"134a55d2-b0a0-489d-e4d7-d4760efc2d4a"},"source":["l1_model_hist = l1_model.fit(x_train, y_train,\n","                             epochs=20,\n","                             batch_size=512,\n","                             validation_data=(x_test, y_test))"],"execution_count":19,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 3s 49ms/step - loss: 1.3184 - acc: 0.6790 - val_loss: 0.6541 - val_acc: 0.8490\n","Epoch 2/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.6328 - acc: 0.8492 - val_loss: 0.5937 - val_acc: 0.8540\n","Epoch 3/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.5806 - acc: 0.8562 - val_loss: 0.5746 - val_acc: 0.8560\n","Epoch 4/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.5619 - acc: 0.8574 - val_loss: 0.5576 - val_acc: 0.8588\n","Epoch 5/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.5561 - acc: 0.8574 - val_loss: 0.5700 - val_acc: 0.8495\n","Epoch 6/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.5391 - acc: 0.8613 - val_loss: 0.5297 - val_acc: 0.8656\n","Epoch 7/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.5366 - acc: 0.8620 - val_loss: 0.5976 - val_acc: 0.8289\n","Epoch 8/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.5318 - acc: 0.8668 - val_loss: 0.5262 - val_acc: 0.8671\n","Epoch 9/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.5224 - acc: 0.8678 - val_loss: 0.5396 - val_acc: 0.8596\n","Epoch 10/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.5210 - acc: 0.8661 - val_loss: 0.5200 - val_acc: 0.8686\n","Epoch 11/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.5093 - acc: 0.8742 - val_loss: 0.5276 - val_acc: 0.8648\n","Epoch 12/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.5277 - acc: 0.8630 - val_loss: 0.5379 - val_acc: 0.8572\n","Epoch 13/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.5064 - acc: 0.8750 - val_loss: 0.5235 - val_acc: 0.8650\n","Epoch 14/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.5042 - acc: 0.8743 - val_loss: 0.5173 - val_acc: 0.8644\n","Epoch 15/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.5023 - acc: 0.8742 - val_loss: 0.5210 - val_acc: 0.8665\n","Epoch 16/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.4905 - acc: 0.8839 - val_loss: 0.5036 - val_acc: 0.8731\n","Epoch 17/20\n","49/49 [==============================] - 2s 41ms/step - loss: 0.4873 - acc: 0.8826 - val_loss: 0.5199 - val_acc: 0.8643\n","Epoch 18/20\n","49/49 [==============================] - 2s 45ms/step - loss: 0.4861 - acc: 0.8828 - val_loss: 0.5039 - val_acc: 0.8704\n","Epoch 19/20\n","49/49 [==============================] - 2s 42ms/step - loss: 0.4806 - acc: 0.8858 - val_loss: 0.4938 - val_acc: 0.8752\n","Epoch 20/20\n","49/49 [==============================] - 2s 41ms/step - loss: 0.4691 - acc: 0.8873 - val_loss: 0.4867 - val_acc: 0.8765\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"h8ixU35xyGx5","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1610744209380,"user_tz":300,"elapsed":36707,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"55d053e5-5a8c-4467-beb0-57b5d73bb98c"},"source":["l1_model_val_loss = l1_model_hist.history['val_loss']\n","\n","def modelplot_L1():\n","  sns.scatterplot(x=epochs, y=original_val_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=l1_model_val_loss, color=\"b\", marker='o', label='L1-regularized model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Validation loss')\n","  plt.legend()\n","\n","modelplot_L1()"],"execution_count":20,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Pj7DDJ7Yxk4N","executionInfo":{"status":"ok","timestamp":1610744209382,"user_tz":300,"elapsed":32158,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}}},"source":["l12_model = models.Sequential()\n","l12_model.add(layers.Dense(16, kernel_regularizer=regularizers.l1_l2(l1=0.001, l2=0.001),\n","                          activation='relu', input_shape=(10000,)))\n","l12_model.add(layers.Dense(16, kernel_regularizer=regularizers.l1_l2(l1=0.001, l2=0.001),\n","                          activation='relu'))\n","l12_model.add(layers.Dense(1, activation='sigmoid'))"],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"WMwHU_Hbx4Ld","executionInfo":{"status":"ok","timestamp":1610744209384,"user_tz":300,"elapsed":30438,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}}},"source":["l12_model.compile(optimizer='rmsprop',\n","                 loss='binary_crossentropy',\n","                 metrics=['acc'])"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"dTmM_5TOyAjc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610744253492,"user_tz":300,"elapsed":72774,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"75275b3a-cbfd-4c81-a4e0-e7b8f8bc8478"},"source":["l12_model_hist = l12_model.fit(x_train, y_train,\n","                             epochs=20,\n","                             batch_size=512,\n","                             validation_data=(x_test, y_test))"],"execution_count":23,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 4s 64ms/step - loss: 1.3412 - acc: 0.6977 - val_loss: 0.7020 - val_acc: 0.8309\n","Epoch 2/20\n","49/49 [==============================] - 2s 40ms/step - loss: 0.6816 - acc: 0.8338 - val_loss: 0.6372 - val_acc: 0.8443\n","Epoch 3/20\n","49/49 [==============================] - 2s 40ms/step - loss: 0.6211 - acc: 0.8504 - val_loss: 0.6084 - val_acc: 0.8499\n","Epoch 4/20\n","49/49 [==============================] - 2s 40ms/step - loss: 0.5945 - acc: 0.8531 - val_loss: 0.5834 - val_acc: 0.8570\n","Epoch 5/20\n","49/49 [==============================] - 2s 40ms/step - loss: 0.5729 - acc: 0.8607 - val_loss: 0.5862 - val_acc: 0.8494\n","Epoch 6/20\n","49/49 [==============================] - 2s 41ms/step - loss: 0.5664 - acc: 0.8591 - val_loss: 0.5783 - val_acc: 0.8510\n","Epoch 7/20\n","49/49 [==============================] - 2s 49ms/step - loss: 0.5529 - acc: 0.8612 - val_loss: 0.6090 - val_acc: 0.8303\n","Epoch 8/20\n","49/49 [==============================] - 2s 43ms/step - loss: 0.5520 - acc: 0.8585 - val_loss: 0.5460 - val_acc: 0.8630\n","Epoch 9/20\n","49/49 [==============================] - 2s 47ms/step - loss: 0.5391 - acc: 0.8671 - val_loss: 0.5415 - val_acc: 0.8650\n","Epoch 10/20\n","49/49 [==============================] - 2s 44ms/step - loss: 0.5423 - acc: 0.8665 - val_loss: 0.5327 - val_acc: 0.8666\n","Epoch 11/20\n","49/49 [==============================] - 2s 49ms/step - loss: 0.5224 - acc: 0.8729 - val_loss: 0.5378 - val_acc: 0.8648\n","Epoch 12/20\n","49/49 [==============================] - 2s 50ms/step - loss: 0.5256 - acc: 0.8705 - val_loss: 0.5342 - val_acc: 0.8663\n","Epoch 13/20\n","49/49 [==============================] - 2s 43ms/step - loss: 0.5251 - acc: 0.8708 - val_loss: 0.5384 - val_acc: 0.8628\n","Epoch 14/20\n","49/49 [==============================] - 2s 46ms/step - loss: 0.5200 - acc: 0.8768 - val_loss: 0.5196 - val_acc: 0.8711\n","Epoch 15/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5074 - acc: 0.8788 - val_loss: 0.5227 - val_acc: 0.8686\n","Epoch 16/20\n","49/49 [==============================] - 2s 40ms/step - loss: 0.5122 - acc: 0.8779 - val_loss: 0.5134 - val_acc: 0.8732\n","Epoch 17/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5050 - acc: 0.8750 - val_loss: 0.5363 - val_acc: 0.8629\n","Epoch 18/20\n","49/49 [==============================] - 2s 40ms/step - loss: 0.5047 - acc: 0.8782 - val_loss: 0.5245 - val_acc: 0.8649\n","Epoch 19/20\n","49/49 [==============================] - 2s 40ms/step - loss: 0.4969 - acc: 0.8811 - val_loss: 0.5161 - val_acc: 0.8720\n","Epoch 20/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.4914 - acc: 0.8844 - val_loss: 0.5244 - val_acc: 0.8648\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4aItEQzAyHlh","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1610744253770,"user_tz":300,"elapsed":71144,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"5c407566-81c6-4c0e-9f90-2f8b2dd0eb23"},"source":["l12_model_val_loss = l12_model_hist.history['val_loss']\n","\n","def modelplot_L12():\n","  sns.scatterplot(x=epochs, y=original_val_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=l12_model_val_loss, color=\"b\", marker='o', label='L12-regularized model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Validation loss')\n","  plt.legend()\n","\n","modelplot_L12()"],"execution_count":24,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"KTsDikb3aqih"},"source":["## Adding dropout"]},{"cell_type":"markdown","metadata":{"id":"Tb-5-SLIWhvt"},"source":["Dropout is one of the most effective and most commonly used regularization techniques for neural networks, developed by Hinton and his \n","students at the University of Toronto. Dropout, applied to a layer, consists of randomly \"dropping out\" (i.e. setting to zero) a number of \n","output features of the layer during training. Let's say a given layer would normally have returned a vector `[0.2, 0.5, 1.3, 0.8, 1.1]` for a \n","given input sample during training; after applying dropout, this vector will have a few zero entries distributed at random, e.g. `[0, 0.5, \n","1.3, 0, 1.1]`. The \"dropout rate\" is the fraction of the features that are being zeroed-out; it is usually set between 0.2 and 0.5. At test \n","time, no units are dropped out, and instead the layer's output values are scaled down by a factor equal to the dropout rate, so as to \n","balance for the fact that more units are active than at training time.\n","\n","Consider a Numpy matrix containing the output of a layer, `layer_output`, of shape `(batch_size, features)`. At training time, we would be \n","zero-ing out at random a fraction of the values in the matrix:"]},{"cell_type":"code","metadata":{"id":"uOtnV8nkYNjZ"},"source":["## CODE SNIPPET\n","## At training time: we drop out 50% of the units in the output\n","#\n","# layer_output *= np.randint(0, high=2, size=layer_output.shape)\n","#"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QjA6FK0-Wnfp"},"source":["\n","At test time, we would be scaling the output down by the dropout rate. Here we scale by 0.5 (because we were previous dropping half the \n","units):"]},{"cell_type":"code","metadata":{"id":"-d-Sm7ziWoiJ"},"source":["## CODE SNIPPET\n","## At test time:\n","#\n","# layer_output *= 0.5\n","#"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"I-s0tKdSWpMk"},"source":["\n","Note that this process can be implemented by doing both operations at training time and leaving the output unchanged at test time, which is \n","often the way it is implemented in practice:"]},{"cell_type":"code","metadata":{"id":"Q9T9DGhNWqli"},"source":["## CODE SNIPPET\n","## At training time:\n","#\n","# layer_output *= np.randint(0, high=2, size=layer_output.shape)\n","#\n","## Note that we are scaling *up* rather scaling *down* in this case\n","#\n","# layer_output /= 0.5\n","#"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VW_8MPT9WtMn"},"source":["\n","This technique may seem strange and arbitrary. Why would this help reduce overfitting? Geoff Hinton has said that he was inspired, among \n","other things, by a fraud prevention mechanism used by banks -- in his own words: _\"I went to my bank. The tellers kept changing and I asked \n","one of them why. He said he didn’t know but they got moved around a lot. I figured it must be because it would require cooperation \n","between employees to successfully defraud the bank. This made me realize that randomly removing a different subset of neurons on each \n","example would prevent conspiracies and thus reduce overfitting\"_.\n","\n","The core idea is that introducing noise in the output values of a layer can break up happenstance patterns that are not significant (what \n","Hinton refers to as \"conspiracies\"), which the network would start memorizing if no noise was present. \n","\n","In Keras you can introduce dropout in a network via the `Dropout` layer, which gets applied to the output of layer right before it, e.g.:"]},{"cell_type":"code","metadata":{"id":"leQ9f3g3YT2t"},"source":["## CODE SNIPPET\n","#\n","# model.add(layers.Dropout(0.5))\n","#"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"krcmfPKGWvGs"},"source":["Let's add two `Dropout` layers in our IMDB network to see how well they do at reducing overfitting:"]},{"cell_type":"code","metadata":{"id":"bm_dFWS3WwFp","executionInfo":{"status":"ok","timestamp":1610744596607,"user_tz":300,"elapsed":627,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}}},"source":["dpt_model = models.Sequential()\n","dpt_model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n","dpt_model.add(layers.Dropout(0.5))\n","dpt_model.add(layers.Dense(16, activation='relu'))\n","dpt_model.add(layers.Dropout(0.5))\n","dpt_model.add(layers.Dense(1, activation='sigmoid'))\n","\n","dpt_model.compile(optimizer='rmsprop',\n","                  loss='binary_crossentropy',\n","                  metrics=['acc'])"],"execution_count":25,"outputs":[]},{"cell_type":"code","metadata":{"id":"8MxLEv5EWxCy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610744639781,"user_tz":300,"elapsed":40152,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"78f06132-43ed-46b6-c5a2-f07794b42946"},"source":["dpt_model_hist = dpt_model.fit(x_train, y_train,\n","                               epochs=20,\n","                               batch_size=512,\n","                               validation_data=(x_test, y_test))"],"execution_count":26,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 3s 58ms/step - loss: 0.6451 - acc: 0.6205 - val_loss: 0.4557 - val_acc: 0.8632\n","Epoch 2/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.4731 - acc: 0.7975 - val_loss: 0.3499 - val_acc: 0.8812\n","Epoch 3/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.3689 - acc: 0.8583 - val_loss: 0.2946 - val_acc: 0.8863\n","Epoch 4/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.3055 - acc: 0.8910 - val_loss: 0.2809 - val_acc: 0.8869\n","Epoch 5/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.2598 - acc: 0.9097 - val_loss: 0.2773 - val_acc: 0.8898\n","Epoch 6/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.2240 - acc: 0.9268 - val_loss: 0.2913 - val_acc: 0.8873\n","Epoch 7/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1954 - acc: 0.9334 - val_loss: 0.3037 - val_acc: 0.8860\n","Epoch 8/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1845 - acc: 0.9376 - val_loss: 0.3225 - val_acc: 0.8839\n","Epoch 9/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1663 - acc: 0.9471 - val_loss: 0.3473 - val_acc: 0.8794\n","Epoch 10/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1597 - acc: 0.9453 - val_loss: 0.3719 - val_acc: 0.8815\n","Epoch 11/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1431 - acc: 0.9538 - val_loss: 0.3747 - val_acc: 0.8788\n","Epoch 12/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1386 - acc: 0.9518 - val_loss: 0.4114 - val_acc: 0.8774\n","Epoch 13/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.1287 - acc: 0.9577 - val_loss: 0.4344 - val_acc: 0.8777\n","Epoch 14/20\n","49/49 [==============================] - 2s 44ms/step - loss: 0.1291 - acc: 0.9559 - val_loss: 0.4681 - val_acc: 0.8660\n","Epoch 15/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.1241 - acc: 0.9591 - val_loss: 0.4804 - val_acc: 0.8741\n","Epoch 16/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1224 - acc: 0.9612 - val_loss: 0.4725 - val_acc: 0.8714\n","Epoch 17/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1176 - acc: 0.9609 - val_loss: 0.5337 - val_acc: 0.8749\n","Epoch 18/20\n","49/49 [==============================] - 2s 42ms/step - loss: 0.1121 - acc: 0.9622 - val_loss: 0.5720 - val_acc: 0.8743\n","Epoch 19/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1186 - acc: 0.9606 - val_loss: 0.5670 - val_acc: 0.8728\n","Epoch 20/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1111 - acc: 0.9650 - val_loss: 0.5777 - val_acc: 0.8691\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"We61WNRqWyse"},"source":["Let's plot the results:"]},{"cell_type":"code","metadata":{"id":"uTtLY6DtWznW","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1610744770108,"user_tz":300,"elapsed":1020,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"9193d8ec-3986-47ba-fb7d-3bca22ecaf7d"},"source":["dpt_model_val_loss = dpt_model_hist.history['val_loss']\n","\n","def modelplot_Drop():\n","  sns.scatterplot(x=epochs, y=original_val_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=dpt_model_val_loss, color=\"b\", marker='o', label='Dropout-regularized model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Validation loss')\n","  plt.legend()\n","\n","modelplot_Drop()"],"execution_count":27,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"1BJnemLsajtU"},"source":["# Conclusions"]},{"cell_type":"markdown","metadata":{"id":"gxvDqt7KW0t7"},"source":["\n","Again, a clear improvement over the reference network.\n","\n","To recap: here the most common ways to prevent overfitting in neural networks:\n","\n","* Getting more training data.\n","* Reducing the capacity of the network.\n","* Adding weight regularization.\n","* Adding dropout\n","\n","\n","Finally, let's take a look at all our results to see how the models compare. Notice the patterns of loss among the different models with under and over fitting constraints. "]},{"cell_type":"code","metadata":{"id":"YukYx8we6MzG","colab":{"base_uri":"https://localhost:8080/","height":699},"executionInfo":{"status":"ok","timestamp":1610744817666,"user_tz":300,"elapsed":5274,"user":{"displayName":"Chester Wyke","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgS-FB4qKIbxund258vmBabWwfPmTzql3_5XelfFw=s64","userId":"05974796388953628677"}},"outputId":"239f0bdf-50e1-4a84-cf4a-08ec7ccb7edc"},"source":["# Layout all plots into one figure for easy comparison\n","\n","f = plt.figure(figsize=(20, 10))\n","gs = f.add_gridspec(3, 3)\n","\n","f.suptitle('Comparisons of Loss: Underfitting v Overfitting')\n","\n","sns.set_palette(\"flare\", n_colors=8, color_codes=True)\n","sns.set_color_codes(palette='bright')\n","\n","original_diff = np.subtract(original_val_loss, original_train_loss)\n","smaller_diff = np.subtract(smaller_model_val_loss, smaller_model_train_loss)\n","bigger_diff = np.subtract(bigger_model_val_loss, bigger_model_train_loss)\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax1 = f.add_subplot(gs[0, 0])\n","    sns.scatterplot(x=epochs, y=original_val_loss, color=\"g\", marker='X', label='Original model')\n","    sns.scatterplot(x=epochs, y=smaller_model_val_loss, color=\"c\", marker='o', label='Smaller model')\n","    plt.setp(ax1.get_xticklabels(), visible=False)\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax2 = f.add_subplot(gs[0, 1])\n","    sns.scatterplot(x=epochs, y=original_train_loss, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=smaller_model_train_loss, color=\"c\", marker='o')\n","    plt.setp(ax2.get_xticklabels(), visible=False)\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax3 = f.add_subplot(gs[0, 2])\n","    sns.scatterplot(x=epochs, y=original_diff, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=smaller_diff, color=\"c\", marker='o')\n","    plt.setp(ax3.get_xticklabels(), visible=False)  \n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax4 = f.add_subplot(gs[1, 0])\n","    sns.scatterplot(x=epochs, y=original_val_loss, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=bigger_model_val_loss, color=\"m\", marker='o', label='Bigger model')\n","    plt.setp(ax4.get_xticklabels(), visible=False)\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax5 = f.add_subplot(gs[1, 1])\n","    sns.scatterplot(x=epochs, y=original_train_loss, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=bigger_model_train_loss, color=\"m\", marker='o')\n","    plt.setp(ax5.get_xticklabels(), visible=False)\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax6 = f.add_subplot(gs[1, 2])\n","    sns.scatterplot(x=epochs, y=original_diff, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=bigger_diff, color=\"m\", marker='o')\n","    plt.setp(ax6.get_xticklabels(), visible=False)\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax7 = f.add_subplot(gs[2, 0])\n","    sns.scatterplot(x=epochs, y=original_val_loss, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=l1_model_val_loss, color=\"pink\", marker='o', label='L1-regularized model')\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax8 = f.add_subplot(gs[2, 1])\n","    sns.scatterplot(x=epochs, y=original_val_loss, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=l2_model_val_loss, color=\"pink\", marker='o', label='L2-regularized model')\n","    plt.setp(ax8.get_yticklabels(), visible=False)  \n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax9 = f.add_subplot(gs[2, 2])\n","    sns.scatterplot(x=epochs, y=original_val_loss, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=dpt_model_val_loss, color=\"y\", marker='o', label='Dropout-regularized model')\n","    plt.setp(ax9.get_yticklabels(), visible=False)\n","\n","ax7.set(xlabel='Epochs')\n","ax8.set(xlabel='Epochs')\n","ax9.set(xlabel='Epochs')\n","\n","ax1.set(ylabel='Validation loss')\n","ax4.set(ylabel='Validation loss')\n","ax7.set(ylabel='Validation loss')\n","\n","ax2.set(ylabel='Training loss')\n","ax5.set(ylabel='Training loss')\n","\n","ax3.set(ylabel='Loss difference')\n","ax6.set(ylabel='Loss difference')\n","\n","f.align_labels()"],"execution_count":28,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x720 with 9 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"UlkIAEBRcbgy"},"source":["\n","\n","---\n","\n","\n","# Questions to Assess Learning    /25\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"taA8pFbVXEJu"},"source":["4 mark:  In your own words, briefly define overfitting, underfitting, good fit, regularization. Provide a sketch indicating a sample data set, an over-fit curve, an under-fit curve and a good fit curve.\r\n","\r\n","Answer: Overfitting is where a model loses some of it ability to generalize becasue it fits the training data too closely. Underfitting is where the model does not have sufficent capcity to repesent the patterns in the training data. A good fit happens when the model is neigher overfit nor underfit. Regularization allows a model more capcity but penalizes it for using the extra capacity therefore it must have a corresponding improvemnt in fit to allow for using more capacity.\r\n","\r\n","2 mark: Where can we introduce noise into a network? Why there? Can we introduce noise in multiple areas of a network? Why or why not?\r\n","\r\n","We can intoduce noise into the weights of the layers by zeroing them out (dropout). We intoduce it there to help prevert it learning spurious patterns. Yes there are multiple places that noise can be intoduced. It can also be introduced into the inputs of the network. This is possible because it forces the network to cope with a more complicated pattern which can help make it more robust but can also hurt the network causing it to have a worse performance.\r\n","\r\n","4 mark: What are the most common ways to prevent overfitting and provide an example of each. \r\n","\r\n","Answer: Reduce the capacity of the network by removing the total number of nodes in the network (remove layers or number of nodes per layer). Regularize the weights of each layer, for example adding l2 regularaization on the values of the weights. Increase the amount of training data available as this gives the network a better.\r\n","\r\n","1 mark: What is the cost added proportional to in L1 and in L2 regularization?\r\n","\r\n","5 mark: Describe the steps involved to find the right model size for a given set of data.\r\n","\r\n","2 mark: What is meant by “bias” in a network? What happens when a model has a High Bias? What is this an example of (overfitting or underfitting)? \r\n","\r\n","2 mark: What is meant by “variance” in a network? What happens when a model has High Variance? What is this an example of (overfitting or underfitting)? \r\n","\r\n","5 mark: Read the following article: https://www.theregister.com/2020/07/01/mit_dataset_removed/\r\n","Describe a scenario in which biased datasets and models could affect your life negatively. Describe a scenario that does NOT affect your life but could have a negative impact on someone else’s life. What factors must be monitored to prevent biased datasets and models from exhibiting unexpected negative behaviour?\r\n","\r\n","\r\n","\r\n","---\r\n","\r\n"]}]}