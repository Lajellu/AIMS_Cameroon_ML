{"cells":[{"cell_type":"markdown","metadata":{"id":"hbud_VembfGr"},"source":["# Setup"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12684,"status":"ok","timestamp":1610747872161,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"taJ5rPXgTokE","outputId":"c6f7f59b-6b4e-415a-c848-ee15daa750f1"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: keras in /usr/local/lib/python3.6/dist-packages (2.4.3)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras) (2.10.0)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.6/dist-packages (from keras) (3.13)\n","Requirement already satisfied: numpy\u003e=1.9.1 in /usr/local/lib/python3.6/dist-packages (from keras) (1.19.5)\n","Requirement already satisfied: scipy\u003e=0.14 in /usr/local/lib/python3.6/dist-packages (from keras) (1.4.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from h5py-\u003ekeras) (1.15.0)\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.6/dist-packages (2.4.0)\n","Requirement already satisfied: grpcio~=1.32.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.32.0)\n","Requirement already satisfied: six~=1.15.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.15.0)\n","Requirement already satisfied: absl-py~=0.10 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (0.10.0)\n","Requirement already satisfied: keras-preprocessing~=1.1.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.1.2)\n","Requirement already satisfied: h5py~=2.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (2.10.0)\n","Requirement already satisfied: typing-extensions~=3.7.4 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (3.7.4.3)\n","Requirement already satisfied: termcolor~=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.1.0)\n","Requirement already satisfied: astunparse~=1.6.3 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: tensorflow-estimator\u003c2.5.0,\u003e=2.4.0rc0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (2.4.0)\n","Requirement already satisfied: opt-einsum~=3.3.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: gast==0.3.3 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (0.3.3)\n","Requirement already satisfied: google-pasta~=0.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: numpy~=1.19.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.19.5)\n","Requirement already satisfied: wrapt~=1.12.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.12.1)\n","Requirement already satisfied: tensorboard~=2.4 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (2.4.0)\n","Requirement already satisfied: wheel~=0.35 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (0.36.2)\n","Requirement already satisfied: protobuf\u003e=3.9.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (3.12.4)\n","Requirement already satisfied: flatbuffers~=1.12.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow) (1.12)\n","Requirement already satisfied: requests\u003c3,\u003e=2.21.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard~=2.4-\u003etensorflow) (2.23.0)\n","Requirement already satisfied: markdown\u003e=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard~=2.4-\u003etensorflow) (3.3.3)\n","Requirement already satisfied: google-auth-oauthlib\u003c0.5,\u003e=0.4.1 in /usr/local/lib/python3.6/dist-packages (from tensorboard~=2.4-\u003etensorflow) (0.4.2)\n","Requirement already satisfied: setuptools\u003e=41.0.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard~=2.4-\u003etensorflow) (51.1.1)\n","Requirement already satisfied: werkzeug\u003e=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tensorboard~=2.4-\u003etensorflow) (1.0.1)\n","Requirement already satisfied: tensorboard-plugin-wit\u003e=1.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard~=2.4-\u003etensorflow) (1.7.0)\n","Requirement already satisfied: google-auth\u003c2,\u003e=1.6.3 in /usr/local/lib/python3.6/dist-packages (from tensorboard~=2.4-\u003etensorflow) (1.17.2)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,\u003c1.26,\u003e=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests\u003c3,\u003e=2.21.0-\u003etensorboard~=2.4-\u003etensorflow) (1.24.3)\n","Requirement already satisfied: chardet\u003c4,\u003e=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests\u003c3,\u003e=2.21.0-\u003etensorboard~=2.4-\u003etensorflow) (3.0.4)\n","Requirement already satisfied: idna\u003c3,\u003e=2.5 in /usr/local/lib/python3.6/dist-packages (from requests\u003c3,\u003e=2.21.0-\u003etensorboard~=2.4-\u003etensorflow) (2.10)\n","Requirement already satisfied: certifi\u003e=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests\u003c3,\u003e=2.21.0-\u003etensorboard~=2.4-\u003etensorflow) (2020.12.5)\n","Requirement already satisfied: importlib-metadata; python_version \u003c \"3.8\" in /usr/local/lib/python3.6/dist-packages (from markdown\u003e=2.6.8-\u003etensorboard~=2.4-\u003etensorflow) (3.3.0)\n","Requirement already satisfied: requests-oauthlib\u003e=0.7.0 in /usr/local/lib/python3.6/dist-packages (from google-auth-oauthlib\u003c0.5,\u003e=0.4.1-\u003etensorboard~=2.4-\u003etensorflow) (1.3.0)\n","Requirement already satisfied: pyasn1-modules\u003e=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth\u003c2,\u003e=1.6.3-\u003etensorboard~=2.4-\u003etensorflow) (0.2.8)\n","Requirement already satisfied: cachetools\u003c5.0,\u003e=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth\u003c2,\u003e=1.6.3-\u003etensorboard~=2.4-\u003etensorflow) (4.2.0)\n","Requirement already satisfied: rsa\u003c5,\u003e=3.1.4; python_version \u003e= \"3\" in /usr/local/lib/python3.6/dist-packages (from google-auth\u003c2,\u003e=1.6.3-\u003etensorboard~=2.4-\u003etensorflow) (4.6)\n","Requirement already satisfied: zipp\u003e=0.5 in /usr/local/lib/python3.6/dist-packages (from importlib-metadata; python_version \u003c \"3.8\"-\u003emarkdown\u003e=2.6.8-\u003etensorboard~=2.4-\u003etensorflow) (3.4.0)\n","Requirement already satisfied: oauthlib\u003e=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib\u003e=0.7.0-\u003egoogle-auth-oauthlib\u003c0.5,\u003e=0.4.1-\u003etensorboard~=2.4-\u003etensorflow) (3.1.0)\n","Requirement already satisfied: pyasn1\u003c0.5.0,\u003e=0.4.6 in /usr/local/lib/python3.6/dist-packages (from pyasn1-modules\u003e=0.2.1-\u003egoogle-auth\u003c2,\u003e=1.6.3-\u003etensorboard~=2.4-\u003etensorflow) (0.4.8)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (3.2.2)\n","Requirement already satisfied: numpy\u003e=1.11 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (1.19.5)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,\u003e=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.4.7)\n","Requirement already satisfied: kiwisolver\u003e=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (1.3.1)\n","Requirement already satisfied: python-dateutil\u003e=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (2.8.1)\n","Requirement already satisfied: cycler\u003e=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib) (0.10.0)\n","Requirement already satisfied: six\u003e=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil\u003e=2.1-\u003ematplotlib) (1.15.0)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.6/dist-packages (0.11.1)\n","Requirement already satisfied: matplotlib\u003e=2.2 in /usr/local/lib/python3.6/dist-packages (from seaborn) (3.2.2)\n","Requirement already satisfied: scipy\u003e=1.0 in /usr/local/lib/python3.6/dist-packages (from seaborn) (1.4.1)\n","Requirement already satisfied: numpy\u003e=1.15 in /usr/local/lib/python3.6/dist-packages (from seaborn) (1.19.5)\n","Requirement already satisfied: pandas\u003e=0.23 in /usr/local/lib/python3.6/dist-packages (from seaborn) (1.1.5)\n","Requirement already satisfied: kiwisolver\u003e=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib\u003e=2.2-\u003eseaborn) (1.3.1)\n","Requirement already satisfied: python-dateutil\u003e=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib\u003e=2.2-\u003eseaborn) (2.8.1)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,\u003e=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib\u003e=2.2-\u003eseaborn) (2.4.7)\n","Requirement already satisfied: cycler\u003e=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib\u003e=2.2-\u003eseaborn) (0.10.0)\n","Requirement already satisfied: pytz\u003e=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas\u003e=0.23-\u003eseaborn) (2018.9)\n","Requirement already satisfied: six\u003e=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil\u003e=2.1-\u003ematplotlib\u003e=2.2-\u003eseaborn) (1.15.0)\n"]}],"source":["!pip install keras\n","!pip install tensorflow\n","!pip install matplotlib\n","!pip install seaborn"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"elapsed":14517,"status":"ok","timestamp":1610747874003,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"JbvVDwMPTwt9","outputId":"723b0f73-91d5-4bde-8e45-d40af0f362c6"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'2.4.3'"]},"execution_count":2,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["import keras\n","keras.__version__"]},{"cell_type":"markdown","metadata":{"id":"AG2CUuJ-aJf0"},"source":["# Overfitting and underfitting"]},{"cell_type":"markdown","metadata":{"id":"NdGqBYd2Txwe"},"source":["This notebook contains the code samples found in Chapter 3, Section 6 of [Deep Learning with Python](https://www.manning.com/books/deep-learning-with-python?a_aid=keras\u0026a_bid=76564dff). Note that the original text features far more content, in particular further explanations and figures: in this notebook, you will only find source code and related comments.\n","\n","----\n","\n","\n","In all the examples we saw in the previous chapter -- movie review sentiment prediction, topic classification, and house price regression -- \n","we could notice that the performance of our model on the held-out validation data would always peak after a few epochs and would then start \n","degrading, i.e. our model would quickly start to _overfit_ to the training data. Overfitting happens in every single machine learning \n","problem. Learning how to deal with overfitting is essential to mastering machine learning.\n","\n","The fundamental issue in machine learning is the tension between optimization and generalization. \"Optimization\" refers to the process of \n","adjusting a model to get the best performance possible on the training data (the \"learning\" in \"machine learning\"), while \"generalization\" \n","refers to how well the trained model would perform on data it has never seen before. The goal of the game is to get good generalization, of \n","course, but you do not control generalization; you can only adjust the model based on its training data.\n","\n","\n","\n","---\n","\n","\n","At the **beginning of training, optimization and generalization are correlated**: the lower your loss on training data, the lower your loss on \n","test data. While this is happening, **your model is said to be _under-fit_**: there is still progress to be made; the network hasn't yet modeled all relevant patterns in the training data.\n","\n","**After a certain number of iterations on the training data, generalization stops improving**: validation metrics stall then start degrading. **The model is starting to _over-fit_**: it is starting to learn patterns that are specific to the training data but that are misleading or irrelevant when it comes to new data.\n","\n","\n","\n","---\n","\n","\n","\n","To prevent a model from learning misleading or irrelevant patterns found in the training data, _the best solution is of course to get \n","more training data_. A model trained on more data will naturally generalize better. When that is no longer possible, the next best solution \n","is to modulate the quantity of information that your model is allowed to store, or to add constraints on what information it is allowed to \n","store. If a network can only afford to memorize a small number of patterns, the optimization process will force it to focus on the most \n","prominent patterns, which have a better chance of generalizing well.\n","\n","The processing of fighting overfitting in this way is called _regularization_. Let's review some of the most common regularization \n","techniques, and let's apply them in practice to improve our movie classification model from  the previous chapter."]},{"cell_type":"markdown","metadata":{"id":"Infcd4IWT3KZ"},"source":["Note: in this notebook we will be using the IMDB test set as our validation set. It doesn't matter in this context.\n","\n","Let's prepare the data using the code from Chapter 3, Section 5:"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24189,"status":"ok","timestamp":1610747883679,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"70GU6JLOT4oQ","outputId":"2bfb9e09-e893-4e2c-bf9a-625361b4d08c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17465344/17464789 [==============================] - 0s 0us/step\n"]},{"name":"stderr","output_type":"stream","text":["\u003cstring\u003e:6: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/datasets/imdb.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  x_train, y_train = np.array(xs[:idx]), np.array(labels[:idx])\n","/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/datasets/imdb.py:160: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  x_test, y_test = np.array(xs[idx:]), np.array(labels[idx:])\n"]}],"source":["from keras.datasets import imdb\n","import numpy as np\n","\n","(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)\n","\n","def vectorize_sequences(sequences, dimension=10000): #10000\n","    # Create an all-zero matrix of shape (len(sequences), dimension)\n","    results = np.zeros((len(sequences), dimension))\n","    for i, sequence in enumerate(sequences):\n","        results[i, sequence] = 1.  # set specific indices of results[i] to 1s\n","    return results\n","\n","# Our vectorized training data\n","x_train = vectorize_sequences(train_data)\n","# Our vectorized test data\n","x_test = vectorize_sequences(test_data)\n","# Our vectorized labels\n","y_train = np.asarray(train_labels).astype('float32')\n","y_test = np.asarray(test_labels).astype('float32')"]},{"cell_type":"markdown","metadata":{"id":"65TT0I6aaYkb"},"source":["# Fighting overfitting"]},{"cell_type":"markdown","metadata":{"id":"qNwJl7lzbqpe"},"source":["## Reducing the network's size"]},{"cell_type":"markdown","metadata":{"id":"2a7sE49tT8Tj"},"source":["The simplest way to prevent overfitting is to reduce the size of the model, i.e. the number of learnable parameters in the model (which is \n","determined by the number of layers and the number of units per layer). In deep learning, the number of learnable parameters in a model is \n","often referred to as the model's \"capacity\". Intuitively, a model with more parameters will have more \"memorization capacity\" and therefore \n","will be able to easily learn a perfect dictionary-like mapping between training samples and their targets, a mapping without any \n","generalization power. For instance, a model with 500,000 binary parameters could easily be made to learn the class of every digits in the \n","MNIST training set: we would only need 10 binary parameters for each of the 50,000 digits. Such a model would be useless for classifying \n","new digit samples. Always keep this in mind: deep learning models tend to be good at fitting to the training data, but the real challenge \n","is generalization, not fitting.\n","\n","On the other hand, if the network has limited memorization resources, it will not be able to learn this mapping as easily, and thus, in \n","order to minimize its loss, it will have to resort to learning compressed representations that have predictive power regarding the targets \n","-- precisely the type of representations that we are interested in. At the same time, keep in mind that you should be using models that have \n","enough parameters that they won't be underfitting: your model shouldn't be starved for memorization resources. There is a compromise to be \n","found between \"too much capacity\" and \"not enough capacity\".\n","\n","Unfortunately, there is no magical formula to determine what the right number of layers is, or what the right size for each layer is. You \n","will have to evaluate an array of different architectures (on your validation set, not on your test set, of course) in order to find the \n","right model size for your data. The general workflow to find an appropriate model size is to start with relatively few layers and \n","parameters, and start increasing the size of the layers or adding new layers until you see diminishing returns with regard to the \n","validation loss.\n","\n","Let's try this on our movie review classification network. Our original network was as such:"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":24317,"status":"ok","timestamp":1610747883809,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"gbJY5fuCT-AV"},"outputs":[],"source":["from keras import models\n","from keras import layers\n","\n","original_model = models.Sequential()\n","original_model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n","original_model.add(layers.Dense(16, activation='relu'))\n","original_model.add(layers.Dense(1, activation='sigmoid'))\n","\n","original_model.compile(optimizer='rmsprop',\n","                       loss='binary_crossentropy',\n","                       metrics=['acc'])"]},{"cell_type":"markdown","metadata":{"id":"QYS_Jr-DT_QS"},"source":["Now let's try to replace it with this smaller network:"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":24567,"status":"ok","timestamp":1610747884062,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"Letba-oBUAZy"},"outputs":[],"source":["smaller_model = models.Sequential()\n","smaller_model.add(layers.Dense(4, activation='relu', input_shape=(10000,)))\n","smaller_model.add(layers.Dense(4, activation='relu'))\n","smaller_model.add(layers.Dense(1, activation='sigmoid'))\n","\n","smaller_model.compile(optimizer='rmsprop',\n","                      loss='binary_crossentropy',\n","                      metrics=['acc'])"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":65332,"status":"ok","timestamp":1610747924830,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"EtiVTaj-UIzY","outputId":"cf1d8ef1-3579-48d6-9078-dbe1d73df1cf"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 4s 59ms/step - loss: 0.5555 - acc: 0.7389 - val_loss: 0.3620 - val_acc: 0.8668\n","Epoch 2/20\n","49/49 [==============================] - 2s 45ms/step - loss: 0.2867 - acc: 0.9108 - val_loss: 0.2941 - val_acc: 0.8905\n","Epoch 3/20\n","49/49 [==============================] - 2s 41ms/step - loss: 0.2112 - acc: 0.9321 - val_loss: 0.2863 - val_acc: 0.8883\n","Epoch 4/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.1745 - acc: 0.9414 - val_loss: 0.2935 - val_acc: 0.8835\n","Epoch 5/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1492 - acc: 0.9499 - val_loss: 0.3237 - val_acc: 0.8754\n","Epoch 6/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1306 - acc: 0.9565 - val_loss: 0.3226 - val_acc: 0.8772\n","Epoch 7/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1107 - acc: 0.9675 - val_loss: 0.3437 - val_acc: 0.8738\n","Epoch 8/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.0976 - acc: 0.9694 - val_loss: 0.3802 - val_acc: 0.8687\n","Epoch 9/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.0893 - acc: 0.9731 - val_loss: 0.4017 - val_acc: 0.8664\n","Epoch 10/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.0775 - acc: 0.9768 - val_loss: 0.4196 - val_acc: 0.8648\n","Epoch 11/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.0634 - acc: 0.9824 - val_loss: 0.4424 - val_acc: 0.8638\n","Epoch 12/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.0587 - acc: 0.9835 - val_loss: 0.5230 - val_acc: 0.8538\n","Epoch 13/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.0518 - acc: 0.9873 - val_loss: 0.5060 - val_acc: 0.8600\n","Epoch 14/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.0459 - acc: 0.9868 - val_loss: 0.5380 - val_acc: 0.8570\n","Epoch 15/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.0374 - acc: 0.9907 - val_loss: 0.5644 - val_acc: 0.8556\n","Epoch 16/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.0324 - acc: 0.9924 - val_loss: 0.6389 - val_acc: 0.8515\n","Epoch 17/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.0250 - acc: 0.9944 - val_loss: 0.6364 - val_acc: 0.8534\n","Epoch 18/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.0205 - acc: 0.9962 - val_loss: 0.6908 - val_acc: 0.8530\n","Epoch 19/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.0184 - acc: 0.9961 - val_loss: 0.6981 - val_acc: 0.8494\n","Epoch 20/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.0144 - acc: 0.9971 - val_loss: 0.7352 - val_acc: 0.8502\n"]}],"source":["original_hist = original_model.fit(x_train, y_train,\n","                                   epochs=20,\n","                                   batch_size=512,\n","                                   validation_data=(x_test, y_test))"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":101486,"status":"ok","timestamp":1610747960988,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"hHKHO79pUJoG","outputId":"af3d990a-5d18-426f-ee15-02abfebdad7e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 3s 47ms/step - loss: 0.5947 - acc: 0.7373 - val_loss: 0.4431 - val_acc: 0.8333\n","Epoch 2/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.3728 - acc: 0.8811 - val_loss: 0.3373 - val_acc: 0.8790\n","Epoch 3/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.2749 - acc: 0.9084 - val_loss: 0.2994 - val_acc: 0.8847\n","Epoch 4/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.2259 - acc: 0.9229 - val_loss: 0.2837 - val_acc: 0.8870\n","Epoch 5/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.1924 - acc: 0.9337 - val_loss: 0.2783 - val_acc: 0.8885\n","Epoch 6/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.1653 - acc: 0.9440 - val_loss: 0.2852 - val_acc: 0.8856\n","Epoch 7/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.1507 - acc: 0.9513 - val_loss: 0.2946 - val_acc: 0.8837\n","Epoch 8/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.1372 - acc: 0.9564 - val_loss: 0.3131 - val_acc: 0.8788\n","Epoch 9/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.1285 - acc: 0.9589 - val_loss: 0.3169 - val_acc: 0.8802\n","Epoch 10/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.1096 - acc: 0.9651 - val_loss: 0.3281 - val_acc: 0.8780\n","Epoch 11/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.1053 - acc: 0.9664 - val_loss: 0.3435 - val_acc: 0.8755\n","Epoch 12/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.0976 - acc: 0.9697 - val_loss: 0.3713 - val_acc: 0.8701\n","Epoch 13/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.0921 - acc: 0.9712 - val_loss: 0.3872 - val_acc: 0.8682\n","Epoch 14/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.0842 - acc: 0.9755 - val_loss: 0.3963 - val_acc: 0.8696\n","Epoch 15/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.0720 - acc: 0.9789 - val_loss: 0.4190 - val_acc: 0.8659\n","Epoch 16/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.0716 - acc: 0.9788 - val_loss: 0.4366 - val_acc: 0.8658\n","Epoch 17/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.0639 - acc: 0.9816 - val_loss: 0.4590 - val_acc: 0.8636\n","Epoch 18/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.0620 - acc: 0.9815 - val_loss: 0.4845 - val_acc: 0.8606\n","Epoch 19/20\n","49/49 [==============================] - 2s 36ms/step - loss: 0.0539 - acc: 0.9859 - val_loss: 0.5035 - val_acc: 0.8592\n","Epoch 20/20\n","49/49 [==============================] - 2s 35ms/step - loss: 0.0510 - acc: 0.9873 - val_loss: 0.5249 - val_acc: 0.8579\n"]}],"source":["smaller_model_hist = smaller_model.fit(x_train, y_train,\n","                                       epochs=20,\n","                                       batch_size=512,\n","                                       validation_data=(x_test, y_test))"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":101483,"status":"ok","timestamp":1610747960990,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"MoI1_0aQUMIv"},"outputs":[],"source":["epochs = range(1, 21)\n","original_val_loss = original_hist.history['val_loss']\n","smaller_model_val_loss = smaller_model_hist.history['val_loss']"]},{"cell_type":"markdown","metadata":{"id":"x2KkGesoUHma"},"source":["\n","Here's a comparison of the validation losses of the original network and the smaller network. The dots are the validation loss values of \n","the smaller network, and the crosses are the initial network (remember: a lower validation loss signals a better model)."]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"elapsed":102610,"status":"ok","timestamp":1610747962121,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"wpv1ipwZUTWU","outputId":"cafc4000-32e9-4d2e-9fa2-d7e09d32a240"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","def modelplot_Small():\n","  sns.scatterplot(x=epochs, y=original_val_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=smaller_model_val_loss, color=\"b\", marker='o', label='Smaller model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Validation loss')\n","  plt.legend()\n","\n","modelplot_Small()"]},{"cell_type":"markdown","metadata":{"id":"4h73tiCEUVxE"},"source":["\n","As you can see, the smaller network starts overfitting later than the reference one (after 6 epochs rather than 4) and its performance \n","degrades much more slowly once it starts overfitting.\n","\n","Now, for kicks, let's add to this benchmark a network that has much more capacity, far more than the problem would warrant:"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":102609,"status":"ok","timestamp":1610747962123,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"jfSROzwCUXAa"},"outputs":[],"source":["bigger_model = models.Sequential()\n","bigger_model.add(layers.Dense(512, activation='relu', input_shape=(10000,)))\n","bigger_model.add(layers.Dense(512, activation='relu'))\n","bigger_model.add(layers.Dense(1, activation='sigmoid'))\n","\n","bigger_model.compile(optimizer='rmsprop',\n","                     loss='binary_crossentropy',\n","                     metrics=['acc'])"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":424604,"status":"ok","timestamp":1610748284120,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"vH_r-Bc3UYkE","outputId":"0de56812-4649-4e05-99b1-4dc4f1ddee24"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 17s 332ms/step - loss: 0.6248 - acc: 0.7141 - val_loss: 0.4531 - val_acc: 0.7891\n","Epoch 2/20\n","49/49 [==============================] - 16s 328ms/step - loss: 0.2323 - acc: 0.9115 - val_loss: 0.2855 - val_acc: 0.8841\n","Epoch 3/20\n","49/49 [==============================] - 16s 327ms/step - loss: 0.1346 - acc: 0.9488 - val_loss: 0.3104 - val_acc: 0.8863\n","Epoch 4/20\n","49/49 [==============================] - 16s 327ms/step - loss: 0.0560 - acc: 0.9822 - val_loss: 0.4481 - val_acc: 0.8789\n","Epoch 5/20\n","49/49 [==============================] - 16s 330ms/step - loss: 0.0458 - acc: 0.9913 - val_loss: 0.4853 - val_acc: 0.8814\n","Epoch 6/20\n","49/49 [==============================] - 16s 333ms/step - loss: 0.0021 - acc: 0.9999 - val_loss: 0.6742 - val_acc: 0.8801\n","Epoch 7/20\n","49/49 [==============================] - 16s 331ms/step - loss: 0.0180 - acc: 0.9980 - val_loss: 0.6562 - val_acc: 0.8711\n","Epoch 8/20\n","49/49 [==============================] - 16s 329ms/step - loss: 8.1614e-04 - acc: 1.0000 - val_loss: 0.7452 - val_acc: 0.8795\n","Epoch 9/20\n","49/49 [==============================] - 16s 328ms/step - loss: 7.1762e-05 - acc: 1.0000 - val_loss: 0.9070 - val_acc: 0.8795\n","Epoch 10/20\n","49/49 [==============================] - 16s 328ms/step - loss: 1.0378e-05 - acc: 1.0000 - val_loss: 1.0695 - val_acc: 0.8788\n","Epoch 11/20\n","49/49 [==============================] - 16s 327ms/step - loss: 0.1102 - acc: 0.9909 - val_loss: 0.8591 - val_acc: 0.8759\n","Epoch 12/20\n","49/49 [==============================] - 16s 333ms/step - loss: 4.7439e-05 - acc: 1.0000 - val_loss: 0.8950 - val_acc: 0.8778\n","Epoch 13/20\n","49/49 [==============================] - 16s 330ms/step - loss: 1.5595e-05 - acc: 1.0000 - val_loss: 0.9720 - val_acc: 0.8791\n","Epoch 14/20\n","49/49 [==============================] - 16s 330ms/step - loss: 3.1548e-06 - acc: 1.0000 - val_loss: 1.0893 - val_acc: 0.8803\n","Epoch 15/20\n","49/49 [==============================] - 16s 332ms/step - loss: 6.2154e-07 - acc: 1.0000 - val_loss: 1.2290 - val_acc: 0.8801\n","Epoch 16/20\n","49/49 [==============================] - 16s 329ms/step - loss: 1.4337e-07 - acc: 1.0000 - val_loss: 1.3595 - val_acc: 0.8806\n","Epoch 17/20\n","49/49 [==============================] - 16s 329ms/step - loss: 3.8201e-08 - acc: 1.0000 - val_loss: 1.4308 - val_acc: 0.8806\n","Epoch 18/20\n","49/49 [==============================] - 16s 330ms/step - loss: 1.7347e-08 - acc: 1.0000 - val_loss: 1.4701 - val_acc: 0.8808\n","Epoch 19/20\n","49/49 [==============================] - 16s 329ms/step - loss: 1.1501e-08 - acc: 1.0000 - val_loss: 1.4960 - val_acc: 0.8806\n","Epoch 20/20\n","49/49 [==============================] - 16s 329ms/step - loss: 8.8546e-09 - acc: 1.0000 - val_loss: 1.5154 - val_acc: 0.8807\n"]}],"source":["bigger_model_hist = bigger_model.fit(x_train, y_train,\n","                                     epochs=20,\n","                                     batch_size=512,\n","                                     validation_data=(x_test, y_test))"]},{"cell_type":"markdown","metadata":{"id":"XXE6L0r3UapA"},"source":["Here's how the bigger network fares compared to the reference one. The dots are the validation loss values of the bigger network, and the \n","crosses are the initial network."]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"elapsed":424870,"status":"ok","timestamp":1610748284389,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"BOjYknAUUbky","outputId":"b63cef33-1c24-4d69-a425-4c63e7097243"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["bigger_model_val_loss = bigger_model_hist.history['val_loss']\n","\n","def modelplot_Big():\n","  # f, ax = plt.subplots(figsize=(8,6))\n","  # sns.despine()\n","  sns.scatterplot(x=epochs, y=original_val_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=bigger_model_val_loss, color=\"b\", marker='o', label='Bigger model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Validation loss')\n","  plt.legend()\n","\n","modelplot_Big()"]},{"cell_type":"markdown","metadata":{"id":"GtjFIQR9WNX0"},"source":["\n","The bigger network starts overfitting almost right away, after just one epoch, and overfits much more severely. Its validation loss is also \n","more noisy.\n","\n","Meanwhile, here are the training losses for our two networks:"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"elapsed":425142,"status":"ok","timestamp":1610748284664,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"V5LBeXpoWOfO","outputId":"66ddf0f0-cdbd-41a7-f41c-451210313d41"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["original_train_loss = original_hist.history['loss']\n","bigger_model_train_loss = bigger_model_hist.history['loss']\n","smaller_model_train_loss = smaller_model_hist.history['loss']\n","\n","def modelplot_Train():\n","  sns.scatterplot(x=epochs, y=original_train_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=bigger_model_train_loss, color=\"b\", marker='o', label='Bigger model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Training loss')\n","  plt.legend()\n","\n","modelplot_Train()"]},{"cell_type":"markdown","metadata":{"id":"Cy05NCiSWPtw"},"source":["As you can see, the bigger network gets its training loss near zero very quickly. The more capacity the network has, the quicker it will be \n","able to model the training data (resulting in a low training loss), but the more susceptible it is to overfitting (resulting in a large \n","difference between the training and validation loss)."]},{"cell_type":"markdown","metadata":{"id":"-3UfR0zGawbr"},"source":["## Adding weight regularization"]},{"cell_type":"markdown","metadata":{"id":"oLvj5uP3WQkF"},"source":["You may be familiar with _Occam's Razor_ principle: given two explanations for something, the explanation most likely to be correct is the \n","\"simplest\" one, the one that makes the least amount of assumptions. This also applies to the models learned by neural networks: given some \n","training data and a network architecture, there are multiple sets of weights values (multiple _models_) that could explain the data, and \n","simpler models are less likely to overfit than complex ones.\n","\n","A \"simple model\" in this context is a model where the distribution of parameter values has less entropy (or a model with fewer \n","parameters altogether, as we saw in the section above). Thus a common way to mitigate overfitting is to put constraints on the complexity \n","of a network by forcing its weights to only take small values, which makes the distribution of weight values more \"regular\". This is called \n","\"weight regularization\", and it is done by adding to the loss function of the network a _cost_ associated with having large weights. This \n","cost comes in two flavors:\n","\n","* L1 regularization, where the cost added is proportional to the _absolute value of the weights coefficients_ (i.e. to what is called the \n","\"L1 norm\" of the weights).\n","* L2 regularization, where the cost added is proportional to the _square of the value of the weights coefficients_ (i.e. to what is called \n","the \"L2 norm\" of the weights). L2 regularization is also called _weight decay_ in the context of neural networks. Don't let the different \n","name confuse you: weight decay is mathematically the exact same as L2 regularization.\n","\n","In Keras, weight regularization is added by passing _weight regularizer instances_ to layers as keyword arguments. Let's add L2 weight \n","regularization to our movie review classification network:"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":425142,"status":"ok","timestamp":1610748284666,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"hGW4djnaWRz2"},"outputs":[],"source":["from keras import regularizers\n","\n","l2_model = models.Sequential()\n","l2_model.add(layers.Dense(16, kernel_regularizer=regularizers.l2(0.001),\n","                          activation='relu', input_shape=(10000,)))\n","l2_model.add(layers.Dense(16, kernel_regularizer=regularizers.l2(0.001),\n","                          activation='relu'))\n","l2_model.add(layers.Dense(1, activation='sigmoid'))"]},{"cell_type":"code","execution_count":15,"metadata":{"executionInfo":{"elapsed":425140,"status":"ok","timestamp":1610748284668,"user":{"displayName":"Laily Ajellu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgzNC31_DhoQAVmECPS46dTSLCoVazP5O3973KedA=s64","userId":"10450396967027311142"},"user_tz":300},"id":"IcW4-QyvWSc7"},"outputs":[],"source":["l2_model.compile(optimizer='rmsprop',\n","                 loss='binary_crossentropy',\n","                 metrics=['acc'])"]},{"cell_type":"markdown","metadata":{"id":"1tVNezvuWZJN"},"source":["`l2(0.001)` means that every coefficient in the weight matrix of the layer will add `0.001 * weight_coefficient_value` to the total loss of \n","the network. Note that because this penalty is _only added at training time_, the loss for this network will be much higher at training \n","than at test time.\n","\n","Here's the impact of our L2 regularization penalty:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"Ic3RU4m0WbjR"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 3s 49ms/step - loss: 0.6003 - acc: 0.7410 - val_loss: 0.3834 - val_acc: 0.8808\n","Epoch 2/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.3246 - acc: 0.9058 - val_loss: 0.3541 - val_acc: 0.8771\n","Epoch 3/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.2717 - acc: 0.9212 - val_loss: 0.3297 - val_acc: 0.8886\n","Epoch 4/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.2425 - acc: 0.9347 - val_loss: 0.3454 - val_acc: 0.8806\n","Epoch 5/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.2320 - acc: 0.9377 - val_loss: 0.3408 - val_acc: 0.8846\n","Epoch 6/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.2260 - acc: 0.9385 - val_loss: 0.3720 - val_acc: 0.8730\n","Epoch 7/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.2128 - acc: 0.9458 - val_loss: 0.3611 - val_acc: 0.8792\n","Epoch 8/20\n","49/49 [==============================] - 2s 45ms/step - loss: 0.2088 - acc: 0.9459 - val_loss: 0.4100 - val_acc: 0.8622\n","Epoch 9/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.2013 - acc: 0.9518 - val_loss: 0.3750 - val_acc: 0.8763\n","Epoch 10/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1987 - acc: 0.9534 - val_loss: 0.3816 - val_acc: 0.8739\n","Epoch 11/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1943 - acc: 0.9539 - val_loss: 0.3776 - val_acc: 0.8767\n","Epoch 12/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1887 - acc: 0.9571 - val_loss: 0.3934 - val_acc: 0.8718\n","Epoch 13/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1873 - acc: 0.9557 - val_loss: 0.3954 - val_acc: 0.8735\n","Epoch 14/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1798 - acc: 0.9595 - val_loss: 0.4076 - val_acc: 0.8679\n","Epoch 15/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1808 - acc: 0.9572 - val_loss: 0.4773 - val_acc: 0.8502\n","Epoch 16/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1779 - acc: 0.9590 - val_loss: 0.4419 - val_acc: 0.8605\n","Epoch 17/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1820 - acc: 0.9535 - val_loss: 0.4309 - val_acc: 0.8642\n","Epoch 18/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1775 - acc: 0.9589 - val_loss: 0.4069 - val_acc: 0.8712\n","Epoch 19/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1639 - acc: 0.9653 - val_loss: 0.4249 - val_acc: 0.8666\n","Epoch 20/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1673 - acc: 0.9636 - val_loss: 0.4224 - val_acc: 0.8688\n"]}],"source":["l2_model_hist = l2_model.fit(x_train, y_train,\n","                             epochs=20,\n","                             batch_size=512,\n","                             validation_data=(x_test, y_test))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"eK8EKmk6Wduo"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["l2_model_val_loss = l2_model_hist.history['val_loss']\n","\n","def modelplot_L2():\n","  sns.scatterplot(x=epochs, y=original_val_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=l2_model_val_loss, color=\"b\", marker='o', label='L2-regularized model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Validation loss')\n","  plt.legend()\n","\n","modelplot_L2()"]},{"cell_type":"markdown","metadata":{"id":"3YXXn3TJWet0"},"source":["\n","\n","As you can see, the model with L2 regularization (dots) has become much more resistant to overfitting than the reference model (crosses), \n","even though both models have the same number of parameters.\n","\n","As alternatives to L2 regularization, you could use one of the following Keras weight regularizers:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"5bXZG6SCWf2B"},"outputs":[{"data":{"text/plain":["\u003ctensorflow.python.keras.regularizers.L1L2 at 0x7fadc513afd0\u003e"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}],"source":["from keras import regularizers\n","\n","# L1 regularization\n","regularizers.l1(0.001)\n","\n","# L1 and L2 regularization at the same time\n","regularizers.l1_l2(l1=0.001, l2=0.001)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"sRjEst_wxdsX"},"outputs":[],"source":["l1_model = models.Sequential()\n","l1_model.add(layers.Dense(16, kernel_regularizer=regularizers.l1(0.001),\n","                          activation='relu', input_shape=(10000,)))\n","l1_model.add(layers.Dense(16, kernel_regularizer=regularizers.l1(0.001),\n","                          activation='relu'))\n","l1_model.add(layers.Dense(1, activation='sigmoid'))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Zeyoe8TIxkkL"},"outputs":[],"source":["l1_model.compile(optimizer='rmsprop',\n","                 loss='binary_crossentropy',\n","                 metrics=['acc'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"uV9RcPALx9uw"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 3s 47ms/step - loss: 1.3085 - acc: 0.6893 - val_loss: 0.6698 - val_acc: 0.8340\n","Epoch 2/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.6459 - acc: 0.8392 - val_loss: 0.6068 - val_acc: 0.8471\n","Epoch 3/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.5924 - acc: 0.8513 - val_loss: 0.5765 - val_acc: 0.8561\n","Epoch 4/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.5774 - acc: 0.8532 - val_loss: 0.5703 - val_acc: 0.8526\n","Epoch 5/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5574 - acc: 0.8602 - val_loss: 0.5558 - val_acc: 0.8596\n","Epoch 6/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5448 - acc: 0.8642 - val_loss: 0.5909 - val_acc: 0.8356\n","Epoch 7/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5439 - acc: 0.8622 - val_loss: 0.5431 - val_acc: 0.8605\n","Epoch 8/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.5307 - acc: 0.8682 - val_loss: 0.5385 - val_acc: 0.8594\n","Epoch 9/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.5273 - acc: 0.8666 - val_loss: 0.5221 - val_acc: 0.8681\n","Epoch 10/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.5102 - acc: 0.8754 - val_loss: 0.5481 - val_acc: 0.8538\n","Epoch 11/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5202 - acc: 0.8697 - val_loss: 0.5132 - val_acc: 0.8701\n","Epoch 12/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.5113 - acc: 0.8727 - val_loss: 0.5143 - val_acc: 0.8696\n","Epoch 13/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.4944 - acc: 0.8824 - val_loss: 0.5050 - val_acc: 0.8734\n","Epoch 14/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.4955 - acc: 0.8760 - val_loss: 0.5126 - val_acc: 0.8708\n","Epoch 15/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.4817 - acc: 0.8850 - val_loss: 0.4954 - val_acc: 0.8770\n","Epoch 16/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.4851 - acc: 0.8814 - val_loss: 0.4972 - val_acc: 0.8730\n","Epoch 17/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.4747 - acc: 0.8849 - val_loss: 0.4883 - val_acc: 0.8777\n","Epoch 18/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.4648 - acc: 0.8920 - val_loss: 0.4818 - val_acc: 0.8783\n","Epoch 19/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.4628 - acc: 0.8879 - val_loss: 0.4892 - val_acc: 0.8742\n","Epoch 20/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.4489 - acc: 0.8949 - val_loss: 0.4834 - val_acc: 0.8762\n"]}],"source":["l1_model_hist = l1_model.fit(x_train, y_train,\n","                             epochs=20,\n","                             batch_size=512,\n","                             validation_data=(x_test, y_test))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"h8ixU35xyGx5"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["l1_model_val_loss = l1_model_hist.history['val_loss']\n","\n","def modelplot_L1():\n","  sns.scatterplot(x=epochs, y=original_val_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=l1_model_val_loss, color=\"b\", marker='o', label='L1-regularized model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Validation loss')\n","  plt.legend()\n","\n","modelplot_L1()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Pj7DDJ7Yxk4N"},"outputs":[],"source":["l12_model = models.Sequential()\n","l12_model.add(layers.Dense(16, kernel_regularizer=regularizers.l1_l2(l1=0.001, l2=0.001),\n","                          activation='relu', input_shape=(10000,)))\n","l12_model.add(layers.Dense(16, kernel_regularizer=regularizers.l1_l2(l1=0.001, l2=0.001),\n","                          activation='relu'))\n","l12_model.add(layers.Dense(1, activation='sigmoid'))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"WMwHU_Hbx4Ld"},"outputs":[],"source":["l12_model.compile(optimizer='rmsprop',\n","                 loss='binary_crossentropy',\n","                 metrics=['acc'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"dTmM_5TOyAjc"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 4s 60ms/step - loss: 1.3480 - acc: 0.6798 - val_loss: 0.7149 - val_acc: 0.8126\n","Epoch 2/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.6772 - acc: 0.8374 - val_loss: 0.6439 - val_acc: 0.8327\n","Epoch 3/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.6142 - acc: 0.8548 - val_loss: 0.6140 - val_acc: 0.8432\n","Epoch 4/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5880 - acc: 0.8557 - val_loss: 0.5741 - val_acc: 0.8602\n","Epoch 5/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5614 - acc: 0.8630 - val_loss: 0.5856 - val_acc: 0.8472\n","Epoch 6/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5545 - acc: 0.8633 - val_loss: 0.5477 - val_acc: 0.8638\n","Epoch 7/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5382 - acc: 0.8684 - val_loss: 0.5620 - val_acc: 0.8516\n","Epoch 8/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.5358 - acc: 0.8668 - val_loss: 0.5337 - val_acc: 0.8669\n","Epoch 9/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5210 - acc: 0.8733 - val_loss: 0.5254 - val_acc: 0.8699\n","Epoch 10/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5170 - acc: 0.8730 - val_loss: 0.5342 - val_acc: 0.8644\n","Epoch 11/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5178 - acc: 0.8728 - val_loss: 0.5159 - val_acc: 0.8722\n","Epoch 12/20\n","49/49 [==============================] - 2s 44ms/step - loss: 0.5066 - acc: 0.8781 - val_loss: 0.5413 - val_acc: 0.8582\n","Epoch 13/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5078 - acc: 0.8792 - val_loss: 0.5569 - val_acc: 0.8502\n","Epoch 14/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.5072 - acc: 0.8771 - val_loss: 0.5535 - val_acc: 0.8507\n","Epoch 15/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.5051 - acc: 0.8769 - val_loss: 0.5067 - val_acc: 0.8748\n","Epoch 16/20\n","49/49 [==============================] - 2s 42ms/step - loss: 0.4908 - acc: 0.8823 - val_loss: 0.5062 - val_acc: 0.8755\n","Epoch 17/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.5021 - acc: 0.8779 - val_loss: 0.5284 - val_acc: 0.8658\n","Epoch 18/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.4972 - acc: 0.8818 - val_loss: 0.5020 - val_acc: 0.8761\n","Epoch 19/20\n","49/49 [==============================] - 2s 39ms/step - loss: 0.4822 - acc: 0.8870 - val_loss: 0.5050 - val_acc: 0.8749\n","Epoch 20/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.4810 - acc: 0.8895 - val_loss: 0.4965 - val_acc: 0.8790\n"]}],"source":["l12_model_hist = l12_model.fit(x_train, y_train,\n","                             epochs=20,\n","                             batch_size=512,\n","                             validation_data=(x_test, y_test))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"4aItEQzAyHlh"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["l12_model_val_loss = l12_model_hist.history['val_loss']\n","\n","def modelplot_L12():\n","  sns.scatterplot(x=epochs, y=original_val_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=l12_model_val_loss, color=\"b\", marker='o', label='L12-regularized model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Validation loss')\n","  plt.legend()\n","\n","modelplot_L12()"]},{"cell_type":"markdown","metadata":{"id":"KTsDikb3aqih"},"source":["## Adding dropout"]},{"cell_type":"markdown","metadata":{"id":"Tb-5-SLIWhvt"},"source":["Dropout is one of the most effective and most commonly used regularization techniques for neural networks, developed by Hinton and his \n","students at the University of Toronto. Dropout, applied to a layer, consists of randomly \"dropping out\" (i.e. setting to zero) a number of \n","output features of the layer during training. Let's say a given layer would normally have returned a vector `[0.2, 0.5, 1.3, 0.8, 1.1]` for a \n","given input sample during training; after applying dropout, this vector will have a few zero entries distributed at random, e.g. `[0, 0.5, \n","1.3, 0, 1.1]`. The \"dropout rate\" is the fraction of the features that are being zeroed-out; it is usually set between 0.2 and 0.5. At test \n","time, no units are dropped out, and instead the layer's output values are scaled down by a factor equal to the dropout rate, so as to \n","balance for the fact that more units are active than at training time.\n","\n","Consider a Numpy matrix containing the output of a layer, `layer_output`, of shape `(batch_size, features)`. At training time, we would be \n","zero-ing out at random a fraction of the values in the matrix:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"uOtnV8nkYNjZ"},"outputs":[],"source":["## CODE SNIPPET\n","## At training time: we drop out 50% of the units in the output\n","#\n","# layer_output *= np.randint(0, high=2, size=layer_output.shape)\n","#"]},{"cell_type":"markdown","metadata":{"id":"QjA6FK0-Wnfp"},"source":["\n","At test time, we would be scaling the output down by the dropout rate. Here we scale by 0.5 (because we were previous dropping half the \n","units):"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"-d-Sm7ziWoiJ"},"outputs":[],"source":["## CODE SNIPPET\n","## At test time:\n","#\n","# layer_output *= 0.5\n","#"]},{"cell_type":"markdown","metadata":{"id":"I-s0tKdSWpMk"},"source":["\n","Note that this process can be implemented by doing both operations at training time and leaving the output unchanged at test time, which is \n","often the way it is implemented in practice:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Q9T9DGhNWqli"},"outputs":[],"source":["## CODE SNIPPET\n","## At training time:\n","#\n","# layer_output *= np.randint(0, high=2, size=layer_output.shape)\n","#\n","## Note that we are scaling *up* rather scaling *down* in this case\n","#\n","# layer_output /= 0.5\n","#"]},{"cell_type":"markdown","metadata":{"id":"VW_8MPT9WtMn"},"source":["\n","This technique may seem strange and arbitrary. Why would this help reduce overfitting? Geoff Hinton has said that he was inspired, among \n","other things, by a fraud prevention mechanism used by banks -- in his own words: _\"I went to my bank. The tellers kept changing and I asked \n","one of them why. He said he didn’t know but they got moved around a lot. I figured it must be because it would require cooperation \n","between employees to successfully defraud the bank. This made me realize that randomly removing a different subset of neurons on each \n","example would prevent conspiracies and thus reduce overfitting\"_.\n","\n","The core idea is that introducing noise in the output values of a layer can break up happenstance patterns that are not significant (what \n","Hinton refers to as \"conspiracies\"), which the network would start memorizing if no noise was present. \n","\n","In Keras you can introduce dropout in a network via the `Dropout` layer, which gets applied to the output of layer right before it, e.g.:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"leQ9f3g3YT2t"},"outputs":[],"source":["## CODE SNIPPET\n","#\n","# model.add(layers.Dropout(0.5))\n","#"]},{"cell_type":"markdown","metadata":{"id":"krcmfPKGWvGs"},"source":["Let's add two `Dropout` layers in our IMDB network to see how well they do at reducing overfitting:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"bm_dFWS3WwFp"},"outputs":[],"source":["dpt_model = models.Sequential()\n","dpt_model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n","dpt_model.add(layers.Dropout(0.5))\n","dpt_model.add(layers.Dense(16, activation='relu'))\n","dpt_model.add(layers.Dropout(0.5))\n","dpt_model.add(layers.Dense(1, activation='sigmoid'))\n","\n","dpt_model.compile(optimizer='rmsprop',\n","                  loss='binary_crossentropy',\n","                  metrics=['acc'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"8MxLEv5EWxCy"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/20\n","49/49 [==============================] - 3s 46ms/step - loss: 0.6492 - acc: 0.5999 - val_loss: 0.4730 - val_acc: 0.8636\n","Epoch 2/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.4851 - acc: 0.7886 - val_loss: 0.3402 - val_acc: 0.8821\n","Epoch 3/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.3796 - acc: 0.8529 - val_loss: 0.3050 - val_acc: 0.8824\n","Epoch 4/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.3145 - acc: 0.8852 - val_loss: 0.2849 - val_acc: 0.8858\n","Epoch 5/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.2693 - acc: 0.9067 - val_loss: 0.2792 - val_acc: 0.8872\n","Epoch 6/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.2338 - acc: 0.9220 - val_loss: 0.2859 - val_acc: 0.8871\n","Epoch 7/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.2147 - acc: 0.9297 - val_loss: 0.2951 - val_acc: 0.8870\n","Epoch 8/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1853 - acc: 0.9402 - val_loss: 0.3075 - val_acc: 0.8854\n","Epoch 9/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1694 - acc: 0.9466 - val_loss: 0.3488 - val_acc: 0.8831\n","Epoch 10/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1600 - acc: 0.9467 - val_loss: 0.3638 - val_acc: 0.8814\n","Epoch 11/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1457 - acc: 0.9509 - val_loss: 0.3848 - val_acc: 0.8794\n","Epoch 12/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1360 - acc: 0.9535 - val_loss: 0.4068 - val_acc: 0.8799\n","Epoch 13/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1304 - acc: 0.9558 - val_loss: 0.4276 - val_acc: 0.8799\n","Epoch 14/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1203 - acc: 0.9569 - val_loss: 0.4753 - val_acc: 0.8785\n","Epoch 15/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1185 - acc: 0.9607 - val_loss: 0.4745 - val_acc: 0.8777\n","Epoch 16/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1145 - acc: 0.9607 - val_loss: 0.5132 - val_acc: 0.8759\n","Epoch 17/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1189 - acc: 0.9613 - val_loss: 0.5552 - val_acc: 0.8734\n","Epoch 18/20\n","49/49 [==============================] - 2s 37ms/step - loss: 0.1054 - acc: 0.9641 - val_loss: 0.5489 - val_acc: 0.8757\n","Epoch 19/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1133 - acc: 0.9603 - val_loss: 0.5826 - val_acc: 0.8723\n","Epoch 20/20\n","49/49 [==============================] - 2s 38ms/step - loss: 0.1065 - acc: 0.9618 - val_loss: 0.5949 - val_acc: 0.8741\n"]}],"source":["dpt_model_hist = dpt_model.fit(x_train, y_train,\n","                               epochs=20,\n","                               batch_size=512,\n","                               validation_data=(x_test, y_test))"]},{"cell_type":"markdown","metadata":{"id":"We61WNRqWyse"},"source":["Let's plot the results:"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"uTtLY6DtWznW"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["dpt_model_val_loss = dpt_model_hist.history['val_loss']\n","\n","def modelplot_Drop():\n","  sns.scatterplot(x=epochs, y=original_val_loss, color=\"b\", marker='x', label='Original model')\n","  sns.scatterplot(x=epochs, y=dpt_model_val_loss, color=\"b\", marker='o', label='Dropout-regularized model')\n","  plt.xlabel('Epochs')\n","  plt.ylabel('Validation loss')\n","  plt.legend()\n","\n","modelplot_Drop()"]},{"cell_type":"markdown","metadata":{"id":"1BJnemLsajtU"},"source":["# Conclusions"]},{"cell_type":"markdown","metadata":{"id":"gxvDqt7KW0t7"},"source":["\n","Again, a clear improvement over the reference network.\n","\n","To recap: here the most common ways to prevent overfitting in neural networks:\n","\n","* Getting more training data.\n","* Reducing the capacity of the network.\n","* Adding weight regularization.\n","* Adding dropout\n","\n","\n","Finally, let's take a look at all our results to see how the models compare. Notice the patterns of loss among the different models with under and over fitting constraints. "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"YukYx8we6MzG"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 1440x720 with 9 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["# Layout all plots into one figure for easy comparison\n","\n","f = plt.figure(figsize=(20, 10))\n","gs = f.add_gridspec(3, 3)\n","\n","f.suptitle('Comparisons of Loss: Underfitting v Overfitting')\n","\n","sns.set_palette(\"flare\", n_colors=8, color_codes=True)\n","sns.set_color_codes(palette='bright')\n","\n","original_diff = np.subtract(original_val_loss, original_train_loss)\n","smaller_diff = np.subtract(smaller_model_val_loss, smaller_model_train_loss)\n","bigger_diff = np.subtract(bigger_model_val_loss, bigger_model_train_loss)\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax1 = f.add_subplot(gs[0, 0])\n","    sns.scatterplot(x=epochs, y=original_val_loss, color=\"g\", marker='X', label='Original model')\n","    sns.scatterplot(x=epochs, y=smaller_model_val_loss, color=\"c\", marker='o', label='Smaller model')\n","    plt.setp(ax1.get_xticklabels(), visible=False)\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax2 = f.add_subplot(gs[0, 1])\n","    sns.scatterplot(x=epochs, y=original_train_loss, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=smaller_model_train_loss, color=\"c\", marker='o')\n","    plt.setp(ax2.get_xticklabels(), visible=False)\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax3 = f.add_subplot(gs[0, 2])\n","    sns.scatterplot(x=epochs, y=original_diff, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=smaller_diff, color=\"c\", marker='o')\n","    plt.setp(ax3.get_xticklabels(), visible=False)  \n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax4 = f.add_subplot(gs[1, 0])\n","    sns.scatterplot(x=epochs, y=original_val_loss, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=bigger_model_val_loss, color=\"m\", marker='o', label='Bigger model')\n","    plt.setp(ax4.get_xticklabels(), visible=False)\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax5 = f.add_subplot(gs[1, 1])\n","    sns.scatterplot(x=epochs, y=original_train_loss, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=bigger_model_train_loss, color=\"m\", marker='o')\n","    plt.setp(ax5.get_xticklabels(), visible=False)\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax6 = f.add_subplot(gs[1, 2])\n","    sns.scatterplot(x=epochs, y=original_diff, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=bigger_diff, color=\"m\", marker='o')\n","    plt.setp(ax6.get_xticklabels(), visible=False)\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax7 = f.add_subplot(gs[2, 0])\n","    sns.scatterplot(x=epochs, y=original_val_loss, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=l1_model_val_loss, color=\"pink\", marker='o', label='L1-regularized model')\n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax8 = f.add_subplot(gs[2, 1])\n","    sns.scatterplot(x=epochs, y=original_val_loss, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=l2_model_val_loss, color=\"pink\", marker='o', label='L2-regularized model')\n","    plt.setp(ax8.get_yticklabels(), visible=False)  \n","\n","with sns.axes_style(\"darkgrid\", {\"axes.facecolor\": \".9\"}):\n","    sns.set_context(\"talk\")\n","    ax9 = f.add_subplot(gs[2, 2])\n","    sns.scatterplot(x=epochs, y=original_val_loss, color=\"g\", marker='X')\n","    sns.scatterplot(x=epochs, y=dpt_model_val_loss, color=\"y\", marker='o', label='Dropout-regularized model')\n","    plt.setp(ax9.get_yticklabels(), visible=False)\n","\n","ax7.set(xlabel='Epochs')\n","ax8.set(xlabel='Epochs')\n","ax9.set(xlabel='Epochs')\n","\n","ax1.set(ylabel='Validation loss')\n","ax4.set(ylabel='Validation loss')\n","ax7.set(ylabel='Validation loss')\n","\n","ax2.set(ylabel='Training loss')\n","ax5.set(ylabel='Training loss')\n","\n","ax3.set(ylabel='Loss difference')\n","ax6.set(ylabel='Loss difference')\n","\n","f.align_labels()"]},{"cell_type":"markdown","metadata":{"id":"UlkIAEBRcbgy"},"source":["\n","\n","---\n","\n","\n","# Questions to Assess Learning    /25\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"taA8pFbVXEJu"},"source":["4 mark:  In your own words, briefly define overfitting, underfitting, good fit, regularization. Provide a sketch indicating a sample data set, an over-fit curve, an under-fit curve and a good fit curve.\r\n","\r\n","2 mark: Where can we introduce noise into a network? Why there? Can we introduce noise in multiple areas of a network? Why or why not?\r\n","\r\n","4 mark: What are the most common ways to prevent overfitting and provide an example of each. \r\n","\r\n","1 mark: What is the cost added proportional to in L1 and in L2 regularization?\r\n","\r\n","5 mark: Describe the steps involved to find the right model size for a given set of data.\r\n","\r\n","2 mark: What is meant by “bias” in a network? What happens when a model has a High Bias? What is this an example of (overfitting or underfitting)? \r\n","\r\n","2 mark: What is meant by “variance” in a network? What happens when a model has High Variance? What is this an example of (overfitting or underfitting)? \r\n","\r\n","5 mark: Read the following article: https://www.theregister.com/2020/07/01/mit_dataset_removed/\r\n","Describe a scenario in which biased datasets and models could affect your life negatively. Describe a scenario that does NOT affect your life but could have a negative impact on someone else’s life. What factors must be monitored to prevent biased datasets and models from exhibiting unexpected negative behaviour?\r\n","\r\n","\r\n","\r\n","---\r\n","\r\n"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"Lab05","provenance":[{"file_id":"1hV5lp7ZgvZr595gUtt6588FfFO9kFBit","timestamp":1605160499937}],"toc_visible":true,"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}